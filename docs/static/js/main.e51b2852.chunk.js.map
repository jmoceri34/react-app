{"version":3,"sources":["VideoLoopTool.js","App.js","reportWebVitals.js","index.js"],"names":["VideoLoopTool","player","undefined","leftHandle","rightHandle","leftValue","rightValue","videoId","URLSearchParams","window","location","search","get","startLoop","loadVideoById","setTimeout","createSlider","getDuration","seekTo","YT","loadPlayer","onYouTubePlayerAPIReady","$","getScript","min","max","slider","range","values","slide","event","ui","innerHTML","wrap","getCurrentTime","value","format","left","Date","toISOString","substr","children","empty","prepend","Player","playerVars","modestbranding","rel","showinfo","autoplay","mute","height","width","events","data","PlayerState","PLAYING","loopTimeout","setInterval","PAUSED","clearTimeout","ENDED","style","display","id","margin","TextField","label","defaultValue","onChange","e","target","bind","this","Button","variant","color","onClick","require","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e51b2852.chunk.js","sourcesContent":["import React from 'react';\r\nimport $ from 'jquery';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nrequire('jquery-ui/ui/widgets/slider');\r\n\r\nexport default function VideoLoopTool() {\r\n\r\n    var player = undefined;\r\n    var leftHandle = undefined;\r\n    var rightHandle = undefined;\r\n    var leftValue = undefined;\r\n    var rightValue = undefined;\r\n    var loopTimeout;\r\n\r\n    var urlParameters = new URLSearchParams(window.location.search);\r\n\r\n    var videoId = urlParameters.get(\"v\");\r\n\r\n    // keep track when the user enters a new video id\r\n    function handleChange(e) {\r\n        videoId = e.target.value;\r\n    }\r\n\r\n    function startLoop() {\r\n\r\n        // if the player already exists, load the video\r\n        if (player) {\r\n            var r = player.loadVideoById(videoId);\r\n\r\n            if (loopTimeout) {\r\n                clearTimeout(loopTimeout);\r\n            }\r\n\r\n            setTimeout(function () {\r\n                var duration = player.getDuration();\r\n\r\n                var left = 0;\r\n                var right = duration;\r\n\r\n                createSlider(left, right);\r\n\r\n                player.seekTo(leftValue, true);\r\n\r\n            }, 500);\r\n\r\n            return;\r\n        }\r\n\r\n        // if YT hasn't been downloaded yet\r\n        if (!window.YT) {\r\n            // set the call back to load the player once this global callback from youtube is executed\r\n            window.onYouTubePlayerAPIReady = function () {\r\n                loadPlayer(videoId);\r\n            };\r\n\r\n            // go and get the script in the meantime\r\n            $.getScript('https://www.youtube.com/player_api');\r\n        }\r\n        // otherwise load the player\r\n        else {\r\n            loadPlayer(videoId);\r\n        }\r\n\r\n        function createSlider(min, max) {\r\n            var slider = $(\"#slider-range\").slider({\r\n                range: true,\r\n                min: min,\r\n                max: max,\r\n                values: [min, max],\r\n                slide: function (event, ui) {\r\n\r\n                    leftValue = ui.values[0];\r\n                    rightValue = ui.values[1];\r\n\r\n                    if (leftHandle) {\r\n                        leftHandle[0].innerHTML = wrap(leftValue, true, true);\r\n                    }\r\n\r\n                    if (rightHandle) {\r\n                        rightHandle[0].innerHTML = wrap(rightValue, true);\r\n                    }\r\n\r\n                    if (player.getCurrentTime() < leftValue || player.getCurrentTime() > rightValue) {\r\n                        player.seekTo(leftValue, true);\r\n                    }\r\n                }\r\n            });\r\n\r\n            $(slider[0].children[1]).empty();\r\n            $(slider[0].children[2]).empty();\r\n\r\n            leftHandle = $(slider[0].children[1]).prepend(wrap(min, true, true));\r\n            rightHandle = $(slider[0].children[2]).prepend(wrap(max, true));\r\n\r\n            leftValue = min;\r\n            rightValue = max;\r\n\r\n            function wrap(value, format, left) {\r\n                format = format == undefined ? false : true;\r\n                if (format) {\r\n                    value = new Date(value * 1000).toISOString().substr(11, 8);\r\n                }\r\n                var px = left ? \"-35px\" : \"35px\";\r\n                return '<span style=\"position: absolute !important; bottom: -50px; left: ' + px + '; color: #000 !important;\">' + value + '</span>';\r\n            }\r\n        }\r\n\r\n        function loadPlayer(videoId) {\r\n            player = new window.YT.Player('player', {\r\n                playerVars: {\r\n                    modestbranding: 1,\r\n                    rel: 0,\r\n                    showinfo: 0,\r\n                    autoplay: 0,\r\n                    mute: 0\r\n                },\r\n                height: 360,\r\n                width: 640,\r\n                videoId: videoId,\r\n                events: {\r\n                    'onReady': onPlayerReady,\r\n                    'onStateChange': onPlayerStateChange\r\n                }\r\n            });\r\n\r\n            function onPlayerReady(event) {\r\n                var duration = player.getDuration();\r\n\r\n                var left = 0;\r\n                var right = duration;\r\n\r\n                createSlider(left, right);\r\n\r\n                player.seekTo(leftValue, true);\r\n            }\r\n\r\n            function onPlayerStateChange(event) {\r\n                if (event.data == window.YT.PlayerState.PLAYING) {\r\n\r\n                    if (player && player.getCurrentTime() < leftValue) {\r\n                        player.seekTo(leftValue, true);\r\n                    }\r\n\r\n                    var loopTimeout = setInterval(function () {\r\n                        var currentTime = player.getCurrentTime();\r\n\r\n                        if (currentTime >= rightValue) {\r\n                            player.seekTo(leftValue, true);\r\n                        }\r\n                    }, 1000);\r\n                }\r\n                else if (event.data == window.YT.PlayerState.PAUSED) {\r\n                    if (loopTimeout) {\r\n                        clearTimeout(loopTimeout);\r\n                    }\r\n                }\r\n                else if (event.data == window.YT.PlayerState.ENDED) {\r\n                    if (loopTimeout) {\r\n                        clearTimeout(loopTimeout);\r\n                    }\r\n\r\n                    player.seekTo(leftValue, true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (videoId) {\r\n        startLoop();\r\n    }\r\n\r\n    return (\r\n        <div style={{ 'textAlign': \"left\", 'width': '640px', 'margin': '0 auto' }}>\r\n            <h1>Video Loop Tool</h1>\r\n            <div style={{ display: 'block' }}>\r\n                <div id=\"player\"></div>\r\n            </div>\r\n            <div style={{ display: 'block' }}>\r\n\r\n            </div>\r\n            <div style={{ display: 'block' }}>\r\n                <div id=\"slider-range\" style={{ width: \"640px\", margin: '12px auto' }}></div>\r\n            </div>\r\n            <div style={{ display: 'block', 'textAlign': 'left', 'paddingTop': '25px' }}>\r\n                <div>\r\n                    <h2>Instructions</h2>\r\n                    <TextField id=\"standard-basic\" label=\"YouTube VideoID\" defaultValue={videoId} style={{ width: \"600px\" }} onChange={handleChange.bind(this)} />\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={() => { startLoop() }} style={{ 'marginTop': \"12px\"}}>\r\n                        Setup\r\n                    </Button>\r\n                    <h3>Method 1</h3>\r\n                    <p>\r\n                        Say you have a youtube url like this (where videoId is the youtube video id)\r\n                    </p>\r\n                    <p>\r\n                        <strong>https://www.youtube.com/watch?v=videoId</strong>\r\n                    </p>\r\n                    <p>\r\n                        If you change it to this\r\n                    </p>\r\n                    <p>\r\n                        <strong>https://joemoceri.github.io/react-app?v=videoId</strong>\r\n                    </p>\r\n                    <p>\r\n                        By replacing\r\n                    </p>\r\n                    <p>\r\n                        <strong>https://www.youtube.com/watch</strong> with <strong>https://joemoceri.github.io/react-app</strong>\r\n                    </p>\r\n                    <p>you can add additional looping capabilities to any youtube video.</p>\r\n                    <h3>Method 2</h3>\r\n                    <p>\r\n                        You can also grab the video id and put it into the field above. Run setup first when changing the video id, then hit play on the youtube video. You can change the range on the slider below to loop a specific part of the video. Then hit play.\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};","import './App.css';\nimport VideoLoopTool from './VideoLoopTool';\n\nfunction App() {\n    return (\n        <VideoLoopTool />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}