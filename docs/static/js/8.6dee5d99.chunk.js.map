{"version":3,"sources":["video-loop-tool/video-loop-tool.component.tsx"],"names":["VideoSlider","styled","Slider","theme","height","width","VideoLoopTool","props","state","changingVideo","player","startTimeHandle","endTimeHandle","startTimeValue","endTimeValue","sliderMaxValue","loopTimeout","urlParameters","queryStartTime","queryEndTime","playlists","URLSearchParams","window","location","search","storedPlaylists","localStorage","getItem","JSON","parse","selectedPlaylist","undefined","videoId","get","selectedVideoId","sliderValues","playThroughPlaylist","isNumeric","setTimeout","startLoop","this","video","Videos","filter","v","Id","Delay","stopVideo","loopYouTubeVideo","set","clearTimeout","loadVideoById","setupVideoPlayer","w","YT","loadPlayer","onYouTubePlayerAPIReady","$","getScript","Player","playerVars","modestbranding","rel","showinfo","autoplay","mute","events","e","playerOnReady","playerOnStateChange","a","getDuration","duration","left","parseInt","right","createSlider","unMute","seekTo","event","data","PlayerState","PLAYING","getCurrentTime","setInterval","videos","nextVideo","i","length","selectVideo","PAUSED","ENDED","delay","milliseconds","Promise","result","min","max","newSlider","newLeftHandle","children","newRightHandle","remove","prepend","wrap","toString","newurl","protocol","host","pathname","history","pushState","path","setState","startTime","endTime","textContent","Date","toISOString","substr","value","format","px","DOMPurify","sanitize","StartTime","EndTime","document","getElementById","scrollIntoView","behavior","block","inline","VideoId","target","playlist","checked","newValue","sliderMoved","playlistVideoHtml","map","videoIndex","variant","style","margin","padding","background","id","paddingBottom","display","flexWrap","flex","src","alignSelf","color","onClick","Name","className","label","displayEmpty","renderValue","defaultValue","onChange","handlePlaylistDropdownChange","playlistIndex","control","defaultChecked","handlePlayThroughPlaylistChange","maxHeight","overflow","marginTop","element","marginLeft","marginRight","marginBottom","handleVideoIdChange","maxWidth","valueLabelFormat","handleSliderChange","valueLabelDisplay","Component"],"mappings":"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","file":"static/js/8.6dee5d99.chunk.js","sourcesContent":["import $, { isNumeric } from 'jquery';\r\nimport { Component } from 'react';\r\nimport { Playlist } from '../playlists/playlist.model';\r\nimport { Video } from '../playlists/video.model';\r\nimport Slider from '@mui/material/Slider';\r\nimport { Button, Card, CardContent, Checkbox, FormControlLabel, FormGroup, MenuItem, Paper, Select, styled, TextField } from '@mui/material';\r\nimport DOMPurify from 'dompurify';\r\nimport './video-loop-tool.css';\r\n\r\nexport interface VideoLoopToolProps {\r\n\r\n}\r\n\r\nexport interface VideoLoopToolState {\r\n    videoId: string;\r\n    selectedPlaylist: number | undefined;\r\n    selectedVideoId: number | undefined;\r\n    sliderValues: number[];\r\n    playThroughPlaylist: boolean;\r\n}\r\n\r\n\r\nconst VideoSlider = styled(Slider)(({ theme }) => ({\r\n    '& .MuiSlider-thumb': {\r\n        height: 36,\r\n        width: 36,\r\n    },\r\n    '& .MuiSlider-rail': {\r\n        height: 12, \r\n    },\r\n    '& .MuiSlider-track': {\r\n        height: 14,\r\n    },\r\n}));\r\n\r\nexport default class VideoLoopTool extends Component<VideoLoopToolProps, VideoLoopToolState> {\r\n\r\n    state: VideoLoopToolState;\r\n\r\n    changingVideo: boolean;\r\n    player: YT.Player | undefined;\r\n    startTimeHandle: JQuery<any> | undefined;\r\n    endTimeHandle: JQuery<any> | undefined;\r\n\r\n    startTimeValue: number;\r\n    endTimeValue: number;\r\n    sliderMaxValue: number;\r\n\r\n    loopTimeout: NodeJS.Timer | undefined;\r\n\r\n    urlParameters: URLSearchParams;\r\n    queryStartTime: string | null;\r\n    queryEndTime: string | null;\r\n\r\n    playlists: Playlist[];\r\n\r\n    constructor(props: VideoLoopToolProps) {\r\n        super(props);\r\n\r\n        // initialize the slider properties\r\n        this.startTimeValue = 0;\r\n        this.endTimeValue = 0;\r\n        this.sliderMaxValue = 0;\r\n\r\n        // get the query string parameters if any\r\n        this.urlParameters = new URLSearchParams(window.location.search);\r\n\r\n        // get the stored playlists if there are any\r\n        const storedPlaylists = localStorage.getItem(\"Playlists\");\r\n\r\n        this.playlists = storedPlaylists !== null ? JSON.parse(storedPlaylists) : [];\r\n\r\n        let selectedPlaylist : number | undefined = undefined;\r\n        let selectedVideoId: number | undefined = undefined;\r\n\r\n        this.state = {\r\n            videoId: this.urlParameters.get(\"v\")!,\r\n            selectedPlaylist: selectedPlaylist,\r\n            selectedVideoId: undefined,\r\n            sliderValues: [0, 0],\r\n            playThroughPlaylist: false,\r\n        }\r\n\r\n        // used when transitioning between videos\r\n        this.changingVideo = false;\r\n        this.queryStartTime = this.urlParameters.get(\"s\");\r\n        this.queryEndTime = this.urlParameters.get(\"e\");\r\n\r\n        // check the query string time values to always be numbers\r\n        if (!isNumeric(this.queryStartTime)) {\r\n            this.queryStartTime = '0';\r\n        }\r\n\r\n        if (!isNumeric(this.queryEndTime)) {\r\n            this.queryEndTime = '0';\r\n        }\r\n\r\n        // starting with a video id\r\n        if (this.state.videoId) {\r\n            // give it a second\r\n            setTimeout(() => {\r\n\r\n                // if we're on a playlist\r\n                if (selectedPlaylist !== undefined && selectedVideoId !== undefined) {\r\n                    let video = this.playlists[selectedPlaylist!].Videos.filter(v => v.Id == selectedVideoId)[0];\r\n\r\n                    if (video !== undefined) {\r\n                        this.selectVideo(video);\r\n                    }\r\n                    else {\r\n                        this.startLoop();\r\n                    }\r\n                }\r\n                else {\r\n                    this.startLoop();\r\n                }\r\n            }, 1000);\r\n        }\r\n    }\r\n\r\n    startLoop(): void {\r\n\r\n        // on a playlist with a video\r\n        if (this.state.selectedPlaylist !== undefined && this.state.selectedVideoId !== undefined) {\r\n            let video = this.playlists[this.state.selectedPlaylist].Videos.filter(v => v.Id == this.state.selectedVideoId)[0];\r\n\r\n            //check for video delays\r\n            if (video.Delay > 0) {\r\n\r\n                // stop the player with the delay if it exists, otherwise just wait\r\n                if (this.player) {\r\n                    this.player.stopVideo();\r\n                }\r\n\r\n                setTimeout(() => {\r\n                    this.loopYouTubeVideo();\r\n                }, video.Delay * 1000);\r\n            }\r\n            else {\r\n                this.loopYouTubeVideo();\r\n            }\r\n        }\r\n        else {\r\n            this.loopYouTubeVideo();\r\n        }\r\n    }\r\n\r\n    loopYouTubeVideo(): void {\r\n        // set the query video id\r\n        this.urlParameters.set(\"v\", this.state.videoId);\r\n\r\n        // if the player already exists, load the video\r\n        if (this.player) {\r\n\r\n            // clear the timeout\r\n            if (this.loopTimeout) {\r\n                clearTimeout(this.loopTimeout);\r\n            }\r\n\r\n            // load the new video\r\n            this.player.loadVideoById(this.state.videoId);\r\n\r\n            // setup the player with the new values\r\n            this.setupVideoPlayer();\r\n\r\n            // return early\r\n            return;\r\n        }\r\n\r\n        let w = (window as any);\r\n\r\n        // if YT hasn't been downloaded yet\r\n        if (!w.YT) {\r\n            // set the call back to load the player once this global callback from youtube is executed\r\n            w.onYouTubePlayerAPIReady = () => {\r\n                this.loadPlayer(this.state.videoId);\r\n            };\r\n\r\n            // go and get the script in the meantime\r\n            $.getScript('https://www.youtube.com/player_api');\r\n        }\r\n        // otherwise load the player\r\n        else {\r\n            this.loadPlayer(this.state.videoId);\r\n        }\r\n    }\r\n\r\n    loadPlayer(videoId: any): void {\r\n        this.player = new (window as any).YT.Player('player', {\r\n            playerVars: {\r\n                modestbranding: 1,\r\n                rel: 0,\r\n                showinfo: 0,\r\n                autoplay: 0,\r\n                mute: 0\r\n            },\r\n            height: 360,\r\n            width: '100%',\r\n            videoId: videoId,\r\n            events: {\r\n                'onReady': (e: any) => this.playerOnReady(e),\r\n                'onStateChange': (e: any) => this.playerOnStateChange(e)\r\n            }\r\n        });\r\n    }\r\n\r\n    setupVideoPlayer(): void {\r\n\r\n        // duration can be accessed when it's playing, mute it first\r\n        this.player!.mute();\r\n        // timeout to wait for duration\r\n        setTimeout(async () => {\r\n\r\n            // get the duration\r\n            var duration = await this.getDuration();\r\n\r\n            var left = parseInt(this.queryStartTime!) || 0;\r\n            var right = parseInt(this.queryEndTime!) || duration;\r\n\r\n            this.sliderMaxValue = duration;\r\n\r\n            this.createSlider(left, right);\r\n\r\n            // unmute it and play at the start time\r\n            this.player!.unMute();\r\n\r\n            this.player!.seekTo(this.startTimeValue, true);\r\n        });\r\n    }\r\n\r\n    playerOnReady(e: any): void {\r\n\r\n        // setup the video player on ready\r\n        this.setupVideoPlayer();\r\n    }\r\n\r\n    playerOnStateChange(event: any): void {\r\n\r\n        // if the video is playing\r\n        if (event.data == (window as any).YT.PlayerState.PLAYING) {\r\n\r\n            // if the current time is less than the start time, seek to the start time\r\n            if (this.player && this.player.getCurrentTime() < this.startTimeValue) {\r\n                this.player.seekTo(this.startTimeValue, true);\r\n            }\r\n\r\n            // periodically check every 1 second to see if we should loop the video or select the next video in the playlist if selected\r\n            this.loopTimeout = setInterval(() => {\r\n\r\n                if (!this.player!.getCurrentTime) {\r\n                    return;\r\n                }\r\n\r\n                var currentTime = this.player!.getCurrentTime();\r\n\r\n                // nothing to check\r\n                if (currentTime < this.endTimeValue) {\r\n                    return;\r\n                }\r\n\r\n                if (this.changingVideo) {\r\n                    return;\r\n                }\r\n\r\n                if (this.state.selectedPlaylist !== undefined && this.state.playThroughPlaylist) {\r\n\r\n                    this.changingVideo = true;\r\n\r\n                    let videos = this.playlists[this.state.selectedPlaylist!].Videos;\r\n                    let nextVideo: Video | undefined = undefined;\r\n\r\n                    for (let i = 0; i < videos.length; i++) {\r\n                        if (videos[i].Id == this.state.selectedVideoId) {\r\n                            if (i == videos.length - 1) {\r\n                                nextVideo = videos[0];\r\n                            }\r\n                            else {\r\n                                nextVideo = videos[i + 1];\r\n                            }\r\n\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    // found the next video, skip ahead to it\r\n                    if (nextVideo !== undefined) {\r\n                        this.selectVideo(nextVideo!);\r\n                    }\r\n                    // video doesn't exist on playlist\r\n                    else {\r\n                        this.player!.seekTo(this.startTimeValue, true);\r\n                    }\r\n\r\n                    setTimeout(() => {\r\n                        this.changingVideo = false;\r\n                    }, 1000);\r\n                }\r\n                // repeat if it's not checked\r\n                else {\r\n                    this.player!.seekTo(this.startTimeValue, true);\r\n                }\r\n            }, 1000);\r\n        }\r\n        else if (event.data == (window as any).YT.PlayerState.PAUSED) {\r\n            if (this.loopTimeout) {\r\n                clearTimeout(this.loopTimeout);\r\n            }\r\n        }\r\n        else if (event.data == (window as any).YT.PlayerState.ENDED) {\r\n            if (this.loopTimeout) {\r\n                clearTimeout(this.loopTimeout);\r\n            }\r\n\r\n            this.player!.seekTo(this.startTimeValue, true);\r\n        }\r\n    }\r\n\r\n    async getDuration(): Promise<number> {\r\n        if (!this.player) {\r\n            return await 0;\r\n        }\r\n\r\n        let duration = this.player.getDuration();\r\n\r\n        while (!duration || duration === 0) {\r\n            duration = this.player.getDuration();\r\n            await this.delay(500);\r\n        }\r\n\r\n        return duration;\r\n    }\r\n\r\n    delay(milliseconds: number): Promise<unknown> {\r\n        const result = new Promise<unknown>(result => setTimeout(result, milliseconds));\r\n\r\n        return result;\r\n    }\r\n\r\n    createSlider(min: number, max: number): void {\r\n\r\n        let newSlider = $(\".videoSlider\")[0] as any;\r\n        let newLeftHandle = $(newSlider.children[newSlider.children.length - 2]);\r\n        let newRightHandle = $(newSlider.children[newSlider.children.length - 1]);\r\n\r\n        // remove the old elements if found\r\n        if (newLeftHandle.children(\"#videoSliderTime\").length > 0) {\r\n            newLeftHandle.children(\"#videoSliderTime\").remove();\r\n        }\r\n\r\n        if (newRightHandle.children(\"#videoSliderTime\").length > 0) {\r\n            newRightHandle.children(\"#videoSliderTime\").remove();\r\n        }\r\n\r\n        min = min < 0 ? 0 : min;\r\n\r\n        // create the new handles for the slider with the times included\r\n        this.startTimeHandle = newLeftHandle.prepend(this.wrap(min, true, true));\r\n        this.endTimeHandle = newRightHandle.prepend(this.wrap(max, true, false));\r\n\r\n        // keep track of the video time values\r\n        this.startTimeValue = min;\r\n        this.endTimeValue = max;\r\n\r\n        // update the query string when creating the slider\r\n        this.urlParameters.set(\"s\", this.startTimeValue.toString());\r\n        this.urlParameters.set(\"e\", this.endTimeValue.toString());\r\n\r\n        var newurl = window.location.protocol + \"//\" + window.location.host + window.location.pathname + \"?\" + this.urlParameters.toString();\r\n        window.history.pushState({ path: newurl }, '', newurl);\r\n\r\n        this.setState({\r\n            sliderValues: [this.startTimeValue, this.endTimeValue]\r\n        });\r\n    }\r\n\r\n    sliderMoved(startTime: any, endTime: any): void {\r\n\r\n        // update the video time values\r\n        this.startTimeValue = startTime;\r\n        this.endTimeValue = endTime;\r\n\r\n        // Update the new time handle values with the new value\r\n        if (this.startTimeHandle) {\r\n            this.startTimeHandle[0].children[0].textContent = new Date(this.startTimeValue * 1000).toISOString().substr(11, 8);\r\n            // update the query string parameter\r\n            this.urlParameters.set(\"s\", this.startTimeValue.toString());\r\n        }\r\n\r\n        if (this.endTimeHandle) {\r\n            this.endTimeHandle[0].children[0].textContent = new Date(this.endTimeValue * 1000).toISOString().substr(11, 8);\r\n            // update the query string parameter\r\n            this.urlParameters.set(\"e\", this.endTimeValue.toString());\r\n        }\r\n\r\n        var newurl = window.location.protocol + \"//\" + window.location.host + window.location.pathname + \"?\" + this.urlParameters.toString();\r\n\r\n        window.history.pushState({ path: newurl }, '', newurl);\r\n\r\n        // check for bounds and start from the beginning if needed\r\n        if (this.player!.getCurrentTime() < this.startTimeValue || this.player!.getCurrentTime() > this.endTimeValue) {\r\n            this.player!.seekTo(this.startTimeValue, true);\r\n        }\r\n    }\r\n\r\n    wrap(value: number, format: boolean, left: boolean): string {\r\n        let result: string = value.toString();\r\n\r\n        if (format) {\r\n            result = new Date(value * 1000).toISOString().substr(11, 8);\r\n        }\r\n\r\n        // give enough distance to the time values\r\n        var px = left ? \"-13px\" : \"57px\";\r\n\r\n        // sanitize the string since we're adding it ourselves\r\n        return DOMPurify.sanitize('<span id=\"videoSliderTime\" style=\"color: #000 !important; font-family: Roboto, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 400; position: absolute !important; bottom: -50px; left: ' + px + ';\">' + result + '</span>');\r\n    }\r\n\r\n    selectVideo(video: Video): void {\r\n        this.queryStartTime = video.StartTime.toString();\r\n        this.queryEndTime = video.EndTime.toString();\r\n\r\n        // grab the element and scroll it into view\r\n        let e = document.getElementById('video-' + video.Id);\r\n\r\n        e?.scrollIntoView({\r\n            behavior: \"smooth\",\r\n            block: 'center',\r\n            inline: 'center'\r\n        });\r\n\r\n        this.setState({\r\n            videoId: video.VideoId,\r\n            selectedVideoId: video.Id\r\n        }, () => {\r\n\r\n            // after updating the state, start the loop\r\n            this.startLoop();\r\n        });\r\n    }\r\n\r\n    // keep track when the user enters a new video id\r\n    handleVideoIdChange(e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>): void {\r\n        this.setState({\r\n            videoId: e.target.value\r\n        });\r\n    }\r\n\r\n    handlePlaylistDropdownChange(e: any): void {\r\n\r\n        let playlist = isNumeric(e.target.value) ? parseInt(e.target.value) : undefined;\r\n\r\n        this.setState({\r\n            selectedPlaylist: playlist,\r\n            selectedVideoId: undefined // reset the video id when changing playlists\r\n        });\r\n    }\r\n\r\n    handlePlayThroughPlaylistChange(e: React.ChangeEvent<HTMLInputElement>, checked: boolean): void {\r\n        this.setState({\r\n            playThroughPlaylist: checked\r\n        });\r\n    }\r\n\r\n    handleSliderChange(e: Event, newValue: number | number[]): void {\r\n\r\n        let v = newValue as number[];\r\n\r\n        this.sliderMoved(v[0], v[1]);\r\n\r\n        this.setState({\r\n            sliderValues: v\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let playlistVideoHtml: JSX.Element[] = [];\r\n        // if a playlist is selected, show the videos\r\n        if (this.state.selectedPlaylist !== undefined) {\r\n            playlistVideoHtml = this.playlists[this.state.selectedPlaylist!].Videos.map((video, videoIndex) => {\r\n                return (\r\n                    <Card key={video.Id} variant=\"outlined\" style={{ margin: '12px', padding: '0 !important', background: video.Id === this.state.selectedVideoId ? '#ccc' : '#fff' }} id={'video-' + video.Id}>\r\n                            <CardContent key={video.Id} style={{ paddingBottom: '0 !important' }}>\r\n                                <div key={video.Id} style={{ display: 'flex', flexWrap: 'wrap' }}>\r\n                                {\r\n                                    video.Id === this.state.selectedVideoId && (\r\n                                        <h6 style={{flex: '0 0 100%'}}>Currently playing</h6>\r\n                                    )\r\n                                }\r\n                                <img src={\"https://img.youtube.com/vi/\" + video.VideoId + \"/hqdefault.jpg\"} style={{ width: '80x', height: '45px', \"marginRight\": \"12px\", paddingBottom: '12px' }} />\r\n\r\n                                <div style={{ alignSelf: 'center' }} key={video.Id}>\r\n                                    <Button variant=\"contained\" color=\"primary\" onClick={(e) => { this.selectVideo(video) }} style={{ \"marginRight\": \"12px\" }}>\r\n                                        Select\r\n                                    </Button>\r\n                                </div>\r\n                                <p>{video.Name} ({video.StartTime}s - {video.EndTime}s)</p>\r\n                            </div>\r\n                        </CardContent>\r\n                    </Card>\r\n                );\r\n            });\r\n        }\r\n\r\n        return (\r\n            <Card variant=\"outlined\" style={{ margin: '12px', padding: '0 !important', 'minHeight': '950px' }}>\r\n                <CardContent style={{ padding: '0 !important' }}>\r\n                    <div style={{ 'textAlign': \"left\", 'margin': '0 auto', display: 'flex' }} className=\"outerContainer\">\r\n                        <div className=\"playlistsContainer\">\r\n                            <div style={{ display: 'block', 'textAlign': 'left' }}>\r\n                                <div>\r\n                                    <h1>Playlists</h1>\r\n                                    <Select\r\n                                        label=\"Playlists\"\r\n                                        displayEmpty\r\n                                        renderValue={this.state.selectedPlaylist !== undefined ? () => this.playlists[this.state.selectedPlaylist!].Name : () => 'Playlists'}\r\n                                        defaultValue=\"Playlists\"\r\n                                        onChange={e => this.handlePlaylistDropdownChange(e)}\r\n                                        style={{ 'minWidth': '200px'}}>\r\n                                        {\r\n                                            [\r\n                                                <MenuItem key={\"none\"} value={undefined}>None</MenuItem>,\r\n                                                this.playlists.map((playlist, playlistIndex) => {\r\n                                                    return (\r\n                                                        <MenuItem key={playlist.Id} value={playlistIndex}>#{playlist.Id}: {playlist.Name}</MenuItem>\r\n                                                    );\r\n                                                })\r\n                                            ]\r\n                                        }\r\n                                    </Select>\r\n                                    <FormGroup style={{ display: this.state.selectedPlaylist !== undefined ? 'block' : 'none' }}>\r\n                                        <FormControlLabel control={<Checkbox defaultChecked={this.state.playThroughPlaylist} onChange={(e: React.ChangeEvent<HTMLInputElement>, checked: boolean) => this.handlePlayThroughPlaylistChange(e, checked)} />} label=\"Play through Playlist\" />\r\n                                    </FormGroup>\r\n                                    <Paper style={{ maxHeight: '500px', overflow: 'auto', marginTop: '12px' }}>\r\n                                        {\r\n                                            playlistVideoHtml.map(element => {\r\n                                                return element;\r\n                                            })\r\n                                        }\r\n                                    </Paper>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div style={{ width: '100%', marginLeft: '42px', marginRight: '96px'}}>\r\n                            <h1>Video Loop Tool</h1>\r\n                            <div style={{ display: 'flex', marginBottom: '12px' }}>\r\n                                <Button variant=\"contained\" color=\"primary\" onClick={() => { this.startLoop() }} style={{ 'marginTop': \"12px\", 'marginRight': '12px' }}>\r\n                                    Start\r\n                                </Button>\r\n                                <TextField id=\"standard-basic\" label=\"YouTube VideoID\" value={this.state ? this.state.videoId || '' : ''} style={{ width: \"200px\" }} onChange={e => this.handleVideoIdChange(e)} />\r\n                            </div>\r\n                            <div className=\"auto-resizable-iframe\" style={{display: this.player ? 'block' : 'none'}}>\r\n                                <div className=\"playerWrapper\">\r\n                                    <div id=\"player\"></div>\r\n                                </div>\r\n                                <div style={{ display: 'flex', marginTop: '36px', maxWidth: '100%' }}>\r\n                                    <VideoSlider\r\n                                        value={this.state.sliderValues}\r\n                                        valueLabelFormat={(v) => v + 's'}\r\n                                        onChange={(e: Event, newValue: number | number[]) => this.handleSliderChange(e, newValue)}\r\n                                        valueLabelDisplay=\"auto\"\r\n                                        min={0}\r\n                                        max={this.sliderMaxValue}\r\n                                        className={\"videoSlider\"}\r\n                                    />\r\n                                </div> \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    </CardContent>\r\n                </Card>\r\n        );\r\n    }\r\n};"],"sourceRoot":""}