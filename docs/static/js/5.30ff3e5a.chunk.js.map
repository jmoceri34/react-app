{"version":3,"sources":["video-loop-tool/video-loop-tool.component.tsx"],"names":["require","VideoSlider","styled","Slider","theme","height","width","VideoLoopTool","props","state","player","leftHandle","rightHandle","leftValue","rightValue","loopTimeout","urlParameters","queryStartTime","queryEndTime","playlists","URLSearchParams","window","location","search","storedPlaylists","localStorage","getItem","JSON","parse","selectedPlaylist","undefined","length","videoId","get","sliderValues","isNumeric","startLoop","e","this","setState","target","value","set","loadVideoById","clearTimeout","setTimeout","duration","getDuration","left","right","createSlider","seekTo","w","YT","loadPlayer","onYouTubePlayerAPIReady","$","getScript","min","max","newSlider","newLeftHandle","children","newRightHandle","remove","prepend","wrap","newurl","protocol","host","pathname","toString","history","pushState","path","startTime","endTime","textContent","Date","toISOString","substr","getCurrentTime","format","result","px","DOMPurify","sanitize","Player","playerVars","modestbranding","rel","showinfo","autoplay","mute","events","event","data","PlayerState","PLAYING","setInterval","PAUSED","ENDED","video","StartTime","EndTime","VideoId","parseInt","newValue","v","sliderMoved","playlistVideoHtml","Videos","map","videoIndex","variant","style","margin","padding","paddingBottom","display","flexWrap","src","alignSelf","color","onClick","selectVideo","Id","Name","className","label","displayEmpty","renderValue","defaultValue","onChange","handlePlaylistDropdownChange","playlist","playlistIndex","element","marginLeft","marginRight","marginBottom","id","handleChange","marginTop","maxWidth","valueLabelFormat","handleSliderChange","valueLabelDisplay","Component"],"mappings":"qWAQAA,EAAQ,KAaR,IAAMC,EAAcC,YAAOC,IAAPD,EAAe,cAAGE,MAAH,MAAgB,CAC/C,qBAAsB,CAClBC,OAAQ,GACRC,MAAO,IAEX,oBAAqB,CACjBD,OAAQ,IAEZ,qBAAsB,CAClBA,OAAQ,QAIKE,E,kDAejB,WAAYC,GAA4B,IAAD,uBACnC,cAAMA,IAdVC,WAauC,IAXvCC,YAWuC,IAVvCC,gBAUuC,IATvCC,iBASuC,IARvCC,eAQuC,IAPvCC,gBAOuC,IANvCC,iBAMuC,IALvCC,mBAKuC,IAJvCC,oBAIuC,IAHvCC,kBAGuC,IAFvCC,eAEuC,EAInC,EAAKH,cAAgB,IAAII,gBAAgBC,OAAOC,SAASC,QAEzD,IAAMC,EAAkBC,aAAaC,QAAQ,aAE7C,EAAKP,UAAgC,OAApBK,EAA2BG,KAAKC,MAAMJ,GAAmB,GAE1E,IAAIK,OAAmBC,EAVY,OAa/B,EAAKX,UAAUY,OAAS,IACxBF,EAAmB,GAGvB,EAAKpB,MAAQ,CACTuB,QAAS,EAAKhB,cAAciB,IAAI,KAChCJ,iBAAkBA,EAClBK,aAAc,CAAC,EAAG,IAGtB,EAAKjB,eAAiB,EAAKD,cAAciB,IAAI,KAC7C,EAAKf,aAAe,EAAKF,cAAciB,IAAI,KAEtCE,oBAAU,EAAKlB,kBAChB,EAAKA,eAAiB,GAGrBkB,oBAAU,EAAKjB,gBAChB,EAAKA,aAAe,GAGpB,EAAKT,OAAS,EAAKA,MAAMuB,SACzB,EAAKI,YAnC0B,E,gDAwCvC,SAAaC,GACTC,KAAKC,SAAS,CACVP,QAASK,EAAEG,OAAOC,U,uBAI1B,WAAmB,IAAD,OAMd,GAHAH,KAAKtB,cAAc0B,IAAI,IAAKJ,KAAK7B,MAAMuB,SAGnCM,KAAK5B,OAmBL,OAlBA4B,KAAK5B,OAAOiC,cAAcL,KAAK7B,MAAMuB,SAEjCM,KAAKvB,aACL6B,aAAaN,KAAKvB,kBAGtB8B,YAAW,WACP,IAAIC,EAAW,EAAKpC,OAAOqC,cAEvBC,EAAO,EAAK/B,gBAAkB,EAC9BgC,EAAQ,EAAK/B,cAAgB4B,EAEjC,EAAKI,aAAaF,EAAMC,GAExB,EAAKvC,OAAOyC,OAAO,EAAKtC,WAAW,KAEpC,KAKP,IAAIuC,EAAK/B,OAGJ+B,EAAEC,GAWHf,KAAKgB,WAAWhB,KAAK7B,MAAMuB,UAT3BoB,EAAEG,wBAA0B,WACxB,EAAKD,WAAW,EAAK7C,MAAMuB,UAI/BwB,IAAEC,UAAU,yC,0BAQpB,SAAaC,EAAaC,GAEtB,IAAIC,EAAYJ,IAAE,gBAAgB,GAC9BK,EAAgBL,IAAEI,EAAUE,SAASF,EAAUE,SAAS/B,OAAS,IACjEgC,EAAiBP,IAAEI,EAAUE,SAASF,EAAUE,SAAS/B,OAAS,IAElE8B,EAAcC,SAAS,oBAAoB/B,OAAS,GACpD8B,EAAcC,SAAS,oBAAoBE,SAG3CD,EAAeD,SAAS,oBAAoB/B,OAAS,GACrDgC,EAAeD,SAAS,oBAAoBE,SAGhDN,EAAMA,EAAM,EAAI,EAAIA,EACpBC,EAAMA,EAAMrB,KAAK5B,OAAOqC,cAAgBT,KAAK5B,OAAOqC,cAAgBY,EAEpErB,KAAK3B,WAAakD,EAAcI,QAAQ3B,KAAK4B,KAAKR,GAAK,GAAM,IAC7DpB,KAAK1B,YAAcmD,EAAeE,QAAQ3B,KAAK4B,KAAKP,GAAK,GAAM,IAE/DrB,KAAKzB,UAAY6C,EACjBpB,KAAKxB,WAAa6C,EAGlBrB,KAAKtB,cAAc0B,IAAI,IAAKJ,KAAKzB,WACjCyB,KAAKtB,cAAc0B,IAAI,IAAKJ,KAAKxB,YAEjC,IAAIqD,EAAS9C,OAAOC,SAAS8C,SAAW,KAAO/C,OAAOC,SAAS+C,KAAOhD,OAAOC,SAASgD,SAAW,IAAMhC,KAAKtB,cAAcuD,WAC1HlD,OAAOmD,QAAQC,UAAU,CAAEC,KAAMP,GAAU,GAAIA,GAE/C7B,KAAKC,SAAS,CACVL,aAAc,CAACI,KAAKzB,UAAWyB,KAAKxB,gB,yBAI5C,SAAY6D,EAAgBC,GAExBtC,KAAKzB,UAAY8D,EACjBrC,KAAKxB,WAAa8D,EAEdtC,KAAK3B,aACL2B,KAAK3B,WAAW,GAAGmD,SAAS,GAAGe,YAAc,IAAIC,KAAsB,IAAjBxC,KAAKzB,WAAkBkE,cAAcC,OAAO,GAAI,GAEtG1C,KAAKtB,cAAc0B,IAAI,IAAKJ,KAAKzB,YAGjCyB,KAAK1B,cACL0B,KAAK1B,YAAY,GAAGkD,SAAS,GAAGe,YAAc,IAAIC,KAAuB,IAAlBxC,KAAKxB,YAAmBiE,cAAcC,OAAO,GAAI,GAExG1C,KAAKtB,cAAc0B,IAAI,IAAKJ,KAAKxB,aAGrC,IAAIqD,EAAS9C,OAAOC,SAAS8C,SAAW,KAAO/C,OAAOC,SAAS+C,KAAOhD,OAAOC,SAASgD,SAAW,IAAMhC,KAAKtB,cAAcuD,WAE1HlD,OAAOmD,QAAQC,UAAU,CAAEC,KAAMP,GAAU,GAAIA,IAE3C7B,KAAK5B,OAAOuE,iBAAmB3C,KAAKzB,WAAayB,KAAK5B,OAAOuE,iBAAmB3C,KAAKxB,aACrFwB,KAAK5B,OAAOyC,OAAOb,KAAKzB,WAAW,K,kBAI3C,SAAK4B,EAAeyC,EAAiBlC,GACjC,IAAImC,EAAiB1C,EAAM8B,WACvBW,IACAC,EAAS,IAAIL,KAAa,IAARrC,GAAcsC,cAAcC,OAAO,GAAI,IAE7D,IAAII,EAAKpC,EAAO,QAAU,OAC1B,OAAOqC,IAAUC,SAAS,uMAAyMF,EAAK,MAAQD,EAAS,a,wBAG7P,SAAWnD,GAAqB,IAAD,OAC3BM,KAAK5B,OAAS,IAAKW,OAAegC,GAAGkC,OAAO,SAAU,CAClDC,WAAY,CACRC,eAAgB,EAChBC,IAAK,EACLC,SAAU,EACVC,SAAU,EACVC,KAAM,GAEVxF,OAAQ,IACRC,MAAO,OACP0B,QAASA,EACT8D,OAAQ,CACJ,QAAW,SAACzD,GACR,IAAIS,EAAW,EAAKpC,OAAOqC,cAEvBC,EAAO,EAAK/B,gBAAkB,EAC9BgC,EAAQ,EAAK/B,cAAgB4B,EAEjC,EAAKI,aAAaF,EAAMC,GAExB,EAAKvC,OAAOyC,OAAO,EAAKtC,WAAW,IAEvC,cAAiB,SAACkF,GACVA,EAAMC,MAAS3E,OAAegC,GAAG4C,YAAYC,SAEzC,EAAKxF,QAAU,EAAKA,OAAOuE,iBAAmB,EAAKpE,WACnD,EAAKH,OAAOyC,OAAO,EAAKtC,WAAW,GAGvC,EAAKE,YAAcoF,aAAY,WACT,EAAKzF,OAAOuE,kBAEX,EAAKnE,YACpB,EAAKJ,OAAOyC,OAAO,EAAKtC,WAAW,KAExC,MAEEkF,EAAMC,MAAS3E,OAAegC,GAAG4C,YAAYG,OAC9C,EAAKrF,aACL6B,aAAa,EAAK7B,aAGjBgF,EAAMC,MAAS3E,OAAegC,GAAG4C,YAAYI,QAC9C,EAAKtF,aACL6B,aAAa,EAAK7B,aAGtB,EAAKL,OAAOyC,OAAO,EAAKtC,WAAW,U,yBAOvD,SAAYyF,GAAqB,IAAD,OAC5BhE,KAAKrB,eAAiBqF,EAAMC,UAC5BjE,KAAKpB,aAAeoF,EAAME,QAG1BlE,KAAKC,SAAS,CACVP,QAASsE,EAAMG,UAChB,WACC,EAAKrE,iB,0CAIb,SAA6BC,GACzBC,KAAKC,SAAS,CACVV,iBAAkB6E,SAASrE,EAAEG,OAAOC,W,gCAI5C,SAAmBJ,EAAUsE,GAEzB,IAAIC,EAAID,EAERrE,KAAKuE,YAAYD,EAAE,GAAIA,EAAE,IAEzBtE,KAAKC,SAAS,CACVL,aAAc0E,M,oBAItB,WAAU,IAAD,OACDE,EAAmC,GAsBvC,YArBoChF,IAAhCQ,KAAK7B,MAAMoB,mBACXiF,EAAoBxE,KAAKnB,UAAUmB,KAAK7B,MAAMoB,kBAAmBkF,OAAOC,KAAI,SAACV,EAAOW,GAChF,OACI,cAAC,IAAD,CAAqBC,QAAQ,WAAWC,MAAO,CAAEC,OAAQ,OAAQC,QAAS,gBAA1E,SACI,cAAC,IAAD,CAA4BF,MAAO,CAAEG,cAAe,gBAApD,SACI,sBAAoBH,MAAO,CAAEI,QAAS,OAAQC,SAAU,QAAxD,UACA,qBAAKC,IAAK,8BAAgCnB,EAAMG,QAAU,iBAAkBU,MAAO,CAAE7G,MAAO,MAAOD,OAAQ,OAAQ,YAAe,OAAQiH,cAAe,UAErJ,qBAAKH,MAAO,CAAEO,UAAW,UAAzB,SACA,cAAC,IAAD,CAAQR,QAAQ,YAAYS,MAAM,UAAUC,QAAS,WAAQ,EAAKC,YAAYvB,IAAUa,MAAO,CAAE,YAAe,QAAhH,qBAD0Cb,EAAMwB,IAKpD,8BAAIxB,EAAMyB,KAAV,KAAkBzB,EAAMC,UAAxB,OAAuCD,EAAME,QAA7C,UARUF,EAAMwB,KADFxB,EAAMwB,KADjBxB,EAAMwB,QAmBzB,cAAC,IAAD,CAAMZ,QAAQ,WAAWC,MAAO,CAAEC,OAAQ,OAAQC,QAAS,eAAgB,UAAa,SAAxF,SACI,cAAC,IAAD,CAAaF,MAAO,CAAEE,QAAS,gBAA/B,SACI,sBAAKF,MAAO,CAAE,UAAa,OAAQ,OAAU,SAAUI,QAAS,QAAUS,UAAU,iBAApF,UACI,8BACI,qBAAKb,MAAO,CAAEI,QAAS,QAAS,UAAa,QAA7C,SACI,gCACI,2CACA,cAAC,IAAD,CACIU,MAAM,YACNC,cAAY,EACZC,iBAA6CrG,IAAhCQ,KAAK7B,MAAMoB,iBAAiC,kBAAM,EAAKV,UAAU,EAAKV,MAAMoB,kBAAmBkG,MAAO,iBAAM,aACzHK,aAAa,YACbC,SAAU,SAAAhG,GAAC,OAAI,EAAKiG,6BAA6BjG,IACjD8E,MAAO,CAAE,SAAY,SANzB,SASQ7E,KAAKnB,UAAU6F,KAAI,SAACuB,EAAUC,GAC1B,OACI,eAAC,IAAD,CAA4B/F,MAAO+F,EAAnC,cAAoDD,EAAST,GAA7D,KAAmES,EAASR,OAA7DQ,EAAST,SAMpChB,EAAkBE,KAAI,SAAAyB,GAClB,OAAOA,YAM3B,sBAAKtB,MAAO,CAAE7G,MAAO,OAAQoI,WAAY,OAAQC,YAAa,QAA9D,UACI,iDACA,sBAAKxB,MAAO,CAAEI,QAAS,OAAQqB,aAAc,QAA7C,UACI,cAAC,IAAD,CAAQ1B,QAAQ,YAAYS,MAAM,UAAUC,QAAS,WAAQ,EAAKxF,aAAe+E,MAAO,CAAE,UAAa,OAAQ,YAAe,QAA9H,mBAGA,cAAC,IAAD,CAAW0B,GAAG,iBAAiBZ,MAAM,kBAAkBxF,MAAOH,KAAK7B,OAAQ6B,KAAK7B,MAAMuB,SAAgB,GAAImF,MAAO,CAAE7G,MAAO,SAAW+H,SAAU,SAAAhG,GAAC,OAAI,EAAKyG,aAAazG,SAE1K,sBAAK2F,UAAU,wBAAf,UACI,8BACI,qBAAKa,GAAG,aAEZ,qBAAK1B,MAAO,CAAEI,QAAS,OAAQwB,UAAW,OAAQC,SAAU,QAA5D,SACI,cAAC/I,EAAD,CACIwC,MAAOH,KAAK7B,MAAMyB,aAClB+G,iBAAkB,SAACrC,GAAD,OAAOA,EAAI,KAC7ByB,SAAU,SAAChG,EAAUsE,GAAX,OAA2C,EAAKuC,mBAAmB7G,EAAGsE,IAChFwC,kBAAkB,OAClBzF,IAAK,EACLC,IAAKrB,KAAK5B,OAASgG,SAASpE,KAAK5B,OAAOqC,eAAiB,EACzDiF,UAAW,mC,GAhVRoB","file":"static/js/5.30ff3e5a.chunk.js","sourcesContent":["import $, { isNumeric } from 'jquery';\r\nimport { Component } from 'react';\r\nimport { Playlist } from '../playlists/playlist.model';\r\nimport { Video } from '../playlists/video.model';\r\nimport Slider from '@mui/material/Slider';\r\nimport { Button, Card, CardContent, MenuItem, Select, styled, TextField } from '@mui/material';\r\nimport DOMPurify from 'dompurify';\r\nimport './video-loop-tool.css';\r\nrequire('jquery-ui/ui/widgets/slider');\r\n\r\nexport interface VideoLoopToolProps {\r\n\r\n}\r\n\r\nexport interface VideoLoopToolState {\r\n    videoId: string;\r\n    selectedPlaylist: number | undefined;\r\n    sliderValues: number[];\r\n}\r\n\r\n\r\nconst VideoSlider = styled(Slider)(({ theme }) => ({\r\n    '& .MuiSlider-thumb': {\r\n        height: 36,\r\n        width: 36,\r\n    },\r\n    '& .MuiSlider-rail': {\r\n        height: 12, \r\n    },\r\n    '& .MuiSlider-track': {\r\n        height: 14,\r\n    },\r\n}));\r\n\r\nexport default class VideoLoopTool extends Component<VideoLoopToolProps, VideoLoopToolState> {\r\n\r\n    state: VideoLoopToolState;\r\n\r\n    player: any;\r\n    leftHandle: any;\r\n    rightHandle: any;\r\n    leftValue: any;\r\n    rightValue: any;\r\n    loopTimeout: any;\r\n    urlParameters: URLSearchParams;\r\n    queryStartTime: any;\r\n    queryEndTime: any;\r\n    playlists: Playlist[];\r\n\r\n    constructor(props: VideoLoopToolProps) {\r\n        super(props);\r\n\r\n        // get the query string parameters if any\r\n        this.urlParameters = new URLSearchParams(window.location.search);\r\n\r\n        const storedPlaylists = localStorage.getItem(\"Playlists\");\r\n\r\n        this.playlists = storedPlaylists !== null ? JSON.parse(storedPlaylists) : [];\r\n\r\n        let selectedPlaylist = undefined;\r\n\r\n        // show the first playlist if there are any\r\n        if (this.playlists.length > 0) {\r\n            selectedPlaylist = 0;\r\n        }\r\n\r\n        this.state = {\r\n            videoId: this.urlParameters.get(\"v\")!,\r\n            selectedPlaylist: selectedPlaylist,\r\n            sliderValues: [0, 0]\r\n        }\r\n\r\n        this.queryStartTime = this.urlParameters.get(\"s\");\r\n        this.queryEndTime = this.urlParameters.get(\"e\");\r\n\r\n        if (!isNumeric(this.queryStartTime)) {\r\n            this.queryStartTime = 0;\r\n        }\r\n\r\n        if (!isNumeric(this.queryEndTime)) {\r\n            this.queryEndTime = 0;\r\n        }\r\n\r\n        if (this.state && this.state.videoId) {\r\n            this.startLoop();\r\n        }\r\n    }\r\n\r\n    // keep track when the user enters a new video id\r\n    handleChange(e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>): void {\r\n        this.setState({\r\n            videoId: e.target.value\r\n        });\r\n    }\r\n\r\n    startLoop(): void {\r\n\r\n        // set the query video id\r\n        this.urlParameters.set(\"v\", this.state.videoId);\r\n\r\n        // if the player already exists, load the video\r\n        if (this.player) {\r\n            this.player.loadVideoById(this.state.videoId);\r\n\r\n            if (this.loopTimeout) {\r\n                clearTimeout(this.loopTimeout);\r\n            }\r\n\r\n            setTimeout(() => {\r\n                var duration = this.player.getDuration();\r\n\r\n                var left = this.queryStartTime || 0;\r\n                var right = this.queryEndTime || duration;\r\n\r\n                this.createSlider(left, right);\r\n\r\n                this.player.seekTo(this.leftValue, true);\r\n\r\n            }, 500);\r\n\r\n            return;\r\n        }\r\n\r\n        let w = (window as any);\r\n\r\n        // if YT hasn't been downloaded yet\r\n        if (!w.YT) {\r\n            // set the call back to load the player once this global callback from youtube is executed\r\n            w.onYouTubePlayerAPIReady = () => {\r\n                this.loadPlayer(this.state.videoId);\r\n            };\r\n\r\n            // go and get the script in the meantime\r\n            $.getScript('https://www.youtube.com/player_api');\r\n        }\r\n        // otherwise load the player\r\n        else {\r\n            this.loadPlayer(this.state.videoId);\r\n        }\r\n    }\r\n\r\n    createSlider(min: number, max: number): void {\r\n\r\n        let newSlider = $(\".videoSlider\")[0] as any;\r\n        let newLeftHandle = $(newSlider.children[newSlider.children.length - 2]);\r\n        let newRightHandle = $(newSlider.children[newSlider.children.length - 1]);\r\n\r\n        if (newLeftHandle.children(\"#videoSliderTime\").length > 0) {\r\n            newLeftHandle.children(\"#videoSliderTime\").remove();\r\n        }\r\n\r\n        if (newRightHandle.children(\"#videoSliderTime\").length > 0) {\r\n            newRightHandle.children(\"#videoSliderTime\").remove();\r\n        }\r\n\r\n        min = min < 0 ? 0 : min;\r\n        max = max > this.player.getDuration() ? this.player.getDuration() : max;\r\n\r\n        this.leftHandle = newLeftHandle.prepend(this.wrap(min, true, true));\r\n        this.rightHandle = newRightHandle.prepend(this.wrap(max, true, false));\r\n\r\n        this.leftValue = min;\r\n        this.rightValue = max;\r\n\r\n        // update the query string when creating the slider\r\n        this.urlParameters.set(\"s\", this.leftValue);\r\n        this.urlParameters.set(\"e\", this.rightValue);\r\n\r\n        var newurl = window.location.protocol + \"//\" + window.location.host + window.location.pathname + \"?\" + this.urlParameters.toString();\r\n        window.history.pushState({ path: newurl }, '', newurl);\r\n\r\n        this.setState({\r\n            sliderValues: [this.leftValue, this.rightValue]\r\n        });\r\n    }\r\n\r\n    sliderMoved(startTime: any, endTime: any): void {\r\n\r\n        this.leftValue = startTime;\r\n        this.rightValue = endTime;\r\n\r\n        if (this.leftHandle) {\r\n            this.leftHandle[0].children[0].textContent = new Date(this.leftValue * 1000).toISOString().substr(11, 8);\r\n            // update the query string parameter\r\n            this.urlParameters.set(\"s\", this.leftValue);\r\n        }\r\n\r\n        if (this.rightHandle) {\r\n            this.rightHandle[0].children[0].textContent = new Date(this.rightValue * 1000).toISOString().substr(11, 8);\r\n            // update the query string parameter\r\n            this.urlParameters.set(\"e\", this.rightValue);\r\n        }\r\n\r\n        var newurl = window.location.protocol + \"//\" + window.location.host + window.location.pathname + \"?\" + this.urlParameters.toString();\r\n\r\n        window.history.pushState({ path: newurl }, '', newurl);\r\n\r\n        if (this.player.getCurrentTime() < this.leftValue || this.player.getCurrentTime() > this.rightValue) {\r\n            this.player.seekTo(this.leftValue, true);\r\n        }\r\n    }\r\n\r\n    wrap(value: number, format: boolean, left: boolean): string {\r\n        let result: string = value.toString();\r\n        if (format) {\r\n            result = new Date(value * 1000).toISOString().substr(11, 8);\r\n        }\r\n        var px = left ? \"-35px\" : \"35px\";\r\n        return DOMPurify.sanitize('<span id=\"videoSliderTime\" style=\"color: #000 !important; font-family: Roboto, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 400; position: absolute !important; bottom: -50px; left: ' + px + ';\">' + result + '</span>');\r\n    }\r\n\r\n    loadPlayer(videoId: any): void {\r\n        this.player = new (window as any).YT.Player('player', {\r\n            playerVars: {\r\n                modestbranding: 1,\r\n                rel: 0,\r\n                showinfo: 0,\r\n                autoplay: 0,\r\n                mute: 0\r\n            },\r\n            height: 360,\r\n            width: '100%',\r\n            videoId: videoId,\r\n            events: {\r\n                'onReady': (e: any) => {\r\n                    var duration = this.player.getDuration();\r\n\r\n                    var left = this.queryStartTime || 0;\r\n                    var right = this.queryEndTime || duration;\r\n\r\n                    this.createSlider(left, right);\r\n\r\n                    this.player.seekTo(this.leftValue, true);\r\n                },\r\n                'onStateChange': (event: any) => {\r\n                    if (event.data == (window as any).YT.PlayerState.PLAYING) {\r\n\r\n                        if (this.player && this.player.getCurrentTime() < this.leftValue) {\r\n                            this.player.seekTo(this.leftValue, true);\r\n                        }\r\n\r\n                        this.loopTimeout = setInterval(() => {\r\n                            var currentTime = this.player.getCurrentTime();\r\n\r\n                            if (currentTime >= this.rightValue) {\r\n                                this.player.seekTo(this.leftValue, true);\r\n                            }\r\n                        }, 1000);\r\n                    }\r\n                    else if (event.data == (window as any).YT.PlayerState.PAUSED) {\r\n                        if (this.loopTimeout) {\r\n                            clearTimeout(this.loopTimeout);\r\n                        }\r\n                    }\r\n                    else if (event.data == (window as any).YT.PlayerState.ENDED) {\r\n                        if (this.loopTimeout) {\r\n                            clearTimeout(this.loopTimeout);\r\n                        }\r\n\r\n                        this.player.seekTo(this.leftValue, true);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    selectVideo(video: Video): void {\r\n        this.queryStartTime = video.StartTime;\r\n        this.queryEndTime = video.EndTime;\r\n\r\n\r\n        this.setState({\r\n            videoId: video.VideoId\r\n        }, () => {\r\n            this.startLoop();\r\n        });\r\n    }\r\n\r\n    handlePlaylistDropdownChange(e: any): void {\r\n        this.setState({\r\n            selectedPlaylist: parseInt(e.target.value)\r\n        });\r\n    }\r\n\r\n    handleSliderChange(e: Event, newValue: number | number[]): void {\r\n\r\n        let v = newValue as number[];\r\n\r\n        this.sliderMoved(v[0], v[1]);\r\n\r\n        this.setState({\r\n            sliderValues: v\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let playlistVideoHtml: JSX.Element[] = [];\r\n        if (this.state.selectedPlaylist !== undefined) {\r\n            playlistVideoHtml = this.playlists[this.state.selectedPlaylist!].Videos.map((video, videoIndex) => {\r\n                return (\r\n                    <Card key={video.Id} variant=\"outlined\" style={{ margin: '12px', padding: '0 !important' }}>\r\n                        <CardContent key={video.Id} style={{ paddingBottom: '0 !important' }}>\r\n                            <div key={video.Id} style={{ display: 'flex', flexWrap: 'wrap' }}>\r\n                            <img src={\"https://img.youtube.com/vi/\" + video.VideoId + \"/hqdefault.jpg\"} style={{ width: '80x', height: '45px', \"marginRight\": \"12px\", paddingBottom: '12px' }} />\r\n\r\n                                <div style={{ alignSelf: 'center' }} key={video.Id}>\r\n                                <Button variant=\"contained\" color=\"primary\" onClick={() => { this.selectVideo(video) }} style={{ \"marginRight\": \"12px\" }}>\r\n                                    Select\r\n                                </Button>\r\n                            </div>\r\n                            <p>{video.Name} ({video.StartTime}s - {video.EndTime}s)</p>\r\n                        </div>\r\n                    </CardContent>\r\n                </Card>\r\n                );\r\n            });\r\n        }\r\n\r\n        return (\r\n            <Card variant=\"outlined\" style={{ margin: '12px', padding: '0 !important', 'minHeight': '750px' }}>\r\n                <CardContent style={{ padding: '0 !important' }}>\r\n                    <div style={{ 'textAlign': \"left\", 'margin': '0 auto', display: 'flex' }} className=\"outerContainer\">\r\n                        <div>\r\n                            <div style={{ display: 'block', 'textAlign': 'left' }}>\r\n                                <div>\r\n                                    <h1>Playlists</h1>\r\n                                    <Select\r\n                                        label=\"Playlists\"\r\n                                        displayEmpty\r\n                                        renderValue={this.state.selectedPlaylist !== undefined ? () => this.playlists[this.state.selectedPlaylist!].Name : () => 'Playlists'}\r\n                                        defaultValue=\"Playlists\"\r\n                                        onChange={e => this.handlePlaylistDropdownChange(e)}\r\n                                        style={{ 'minWidth': '200px'}}\r\n                                    >\r\n                                        {\r\n                                            this.playlists.map((playlist, playlistIndex) => {\r\n                                                return (\r\n                                                    <MenuItem key={playlist.Id} value={playlistIndex}>#{playlist.Id}: {playlist.Name}</MenuItem>\r\n                                                );\r\n                                            })\r\n                                        }\r\n                                    </Select>\r\n                                    {\r\n                                        playlistVideoHtml.map(element => {\r\n                                            return element;\r\n                                        })\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div style={{ width: '100%', marginLeft: '42px', marginRight: '64px'}}>\r\n                            <h1>Video Loop Tool</h1>\r\n                            <div style={{ display: 'flex', marginBottom: '12px' }}>\r\n                                <Button variant=\"contained\" color=\"primary\" onClick={() => { this.startLoop() }} style={{ 'marginTop': \"12px\", 'marginRight': '12px' }}>\r\n                                    Setup\r\n                                </Button>\r\n                                <TextField id=\"standard-basic\" label=\"YouTube VideoID\" value={this.state ? this.state.videoId || '' : ''} style={{ width: \"200px\" }} onChange={e => this.handleChange(e)} />\r\n                            </div>\r\n                            <div className=\"auto-resizable-iframe\">\r\n                                <div>\r\n                                    <div id=\"player\"></div>\r\n                                </div>\r\n                                <div style={{ display: 'flex', marginTop: '36px', maxWidth: '100%' }}>\r\n                                    <VideoSlider\r\n                                        value={this.state.sliderValues}\r\n                                        valueLabelFormat={(v) => v + 's'}\r\n                                        onChange={(e: Event, newValue: number | number[]) => this.handleSliderChange(e, newValue)}\r\n                                        valueLabelDisplay=\"auto\"\r\n                                        min={0}\r\n                                        max={this.player ? parseInt(this.player.getDuration()) : 0}\r\n                                        className={\"videoSlider\"}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    </CardContent>\r\n                </Card>\r\n        );\r\n    }\r\n};"],"sourceRoot":""}