{"version":3,"sources":["About.js","App.js","reportWebVitals.js","index.js"],"names":["About","obj","loopTimeout","videoId","player","undefined","leftHandle","rightHandle","leftValue","rightValue","playerLoaded","startLoop","loadVideoById","clearTimeout","setTimeout","createSlider","getDuration","seekTo","min","max","slider","$","range","values","slide","event","ui","innerHTML","wrap","pauseVideo","value","format","Date","toISOString","substr","children","empty","prepend","loadPlayer","window","YT","Player","playerVars","modestbranding","rel","showinfo","autoplay","mute","height","width","events","data","PlayerState","PLAYING","running","playVideo","stopVideo","onYouTubePlayerAPIReady","getScript","style","display","id","Button","variant","color","onClick","TextField","label","defaultValue","onChange","e","target","bind","this","margin","require","App","useState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f1746b0a.chunk.js","sourcesContent":["import React from 'react';\r\nimport $ from 'jquery';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nrequire('jquery-ui/ui/widgets/slider');\r\n\r\nexport default function About(obj) {\r\n\r\n    var videoId = obj.videoId;\r\n    var player = undefined;\r\n    var leftHandle = undefined;\r\n    var rightHandle = undefined;\r\n    var leftValue = undefined;\r\n    var rightValue = undefined;\r\n    var playerLoaded = false;\r\n    var loopTimeout;\r\n\r\n    // keep track when the user enters a new video id\r\n    function handleChange(e) {\r\n        videoId = e.target.value;\r\n    }\r\n\r\n    function startLoop() {\r\n\r\n        // if the player already exists, load the video\r\n        if (player) {\r\n            var r = player.loadVideoById(videoId);\r\n\r\n            if (loopTimeout) {\r\n                clearTimeout(loopTimeout);\r\n            }\r\n\r\n            setTimeout(function () {\r\n                var duration = player.getDuration();\r\n\r\n                var left = 0;\r\n                var right = duration;\r\n\r\n                createSlider(left, right);\r\n\r\n                player.seekTo(leftValue, true);\r\n\r\n            }, 500);\r\n\r\n            return;\r\n        }\r\n\r\n        // if YT hasn't been downloaded yet\r\n        if (!window.YT) {\r\n            // set the call back to load the player once this global callback from youtube is executed\r\n            window.onYouTubePlayerAPIReady = function () {\r\n                loadPlayer(videoId);\r\n            };\r\n\r\n            // go and get the script in the meantime\r\n            $.getScript('https://www.youtube.com/player_api');\r\n        }\r\n        // otherwise load the player\r\n        else {\r\n            loadPlayer(videoId);\r\n        }\r\n\r\n        function createSlider(min, max) {\r\n            var slider = $(\"#slider-range\").slider({\r\n                range: true,\r\n                min: min,\r\n                max: max,\r\n                values: [!playerLoaded ? 22 : min, max],\r\n                slide: function (event, ui) {\r\n\r\n                    leftValue = ui.values[0];\r\n                    rightValue = ui.values[1];\r\n\r\n                    if (leftHandle) {\r\n                        leftHandle[0].innerHTML = wrap(leftValue, true);\r\n                    }\r\n\r\n                    if (rightHandle) {\r\n                        rightHandle[0].innerHTML = wrap(rightValue, true);\r\n                    }\r\n\r\n                    player.pauseVideo();\r\n\r\n                    player.seekTo(leftValue, true);\r\n                }\r\n            });\r\n\r\n            $(slider[0].children[1]).empty();\r\n            $(slider[0].children[2]).empty();\r\n\r\n            leftHandle = $(slider[0].children[1]).prepend(wrap(!playerLoaded ? 22 : min, true));\r\n            rightHandle = $(slider[0].children[2]).prepend(wrap(max, true));\r\n\r\n            leftValue = !playerLoaded ? 22 : min;\r\n            rightValue = max;\r\n\r\n            function wrap(value, format) {\r\n                format = format == undefined ? false : true;\r\n                if (format) {\r\n                    value = new Date(value * 1000).toISOString().substr(11, 8);\r\n                }\r\n                return '<span style=\"position: absolute !important; bottom: -50px; color: #000 !important;\">' + value + '</span>';\r\n            }\r\n        }\r\n\r\n        function loadPlayer(videoId) {\r\n            player = new window.YT.Player('player', {\r\n                playerVars: {\r\n                    modestbranding: 1,\r\n                    rel: 0,\r\n                    showinfo: 0,\r\n                    autoplay: 0,\r\n                    mute: 0\r\n                },\r\n                height: 360,\r\n                width: 640,\r\n                videoId: videoId,\r\n                events: {\r\n                    'onReady': onPlayerReady,\r\n                    'onStateChange': onPlayerStateChange\r\n                }\r\n            });\r\n\r\n            function onPlayerReady(event) {\r\n                var duration = player.getDuration();\r\n\r\n                var left = 0;\r\n                var right = duration;\r\n\r\n                createSlider(left, right);\r\n\r\n                player.seekTo(leftValue, true);\r\n\r\n                playerLoaded = true;\r\n            }\r\n\r\n            var running = false;\r\n\r\n            function onPlayerStateChange(event) {\r\n                if (event.data == window.YT.PlayerState.PLAYING && !running) {\r\n\r\n                    running = true;\r\n\r\n                    player.seekTo(leftValue, true);\r\n\r\n                    player.playVideo();\r\n\r\n                    if (loopTimeout) {\r\n                        clearTimeout(loopTimeout);\r\n                    }\r\n\r\n                    var time = (rightValue - leftValue) * 1000;\r\n\r\n                    loopTimeout = setTimeout(function () {\r\n                        running = false;\r\n                        player.stopVideo();\r\n                        player.seekTo(leftValue, true);\r\n                        player.playVideo();\r\n\r\n                    }, time);\r\n\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    startLoop();\r\n\r\n    return (\r\n        <div style={{ 'text-align': \"center\" }}>\r\n            <h1>Video Loop Tool</h1>\r\n            <div style={{ display: 'block' }}>\r\n                <div id=\"player\"></div>\r\n            </div>\r\n            <div style={{ display: 'block' }}>\r\n                <p>\r\n                    Run setup first when changing the video id, then hit play. You can change the range on the slider below to loop a specific part of the video. Then hit play on the youtube video.\r\n                </p>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={() => { startLoop() }}>\r\n                    Setup\r\n                </Button>\r\n            </div>\r\n            <div style={{ display: 'block' }}>\r\n                <TextField id=\"standard-basic\" label=\"YouTube VideoID\" defaultValue={videoId} style={{ width: \"600px\" }} onChange={handleChange.bind(this)} />\r\n            </div>\r\n            <div style={{ display: 'block' }}>\r\n                <div id=\"slider-range\" style={{ width: \"640px\", margin: '12px auto' }}></div>\r\n            </div>\r\n        </div>\r\n    );\r\n};","import './App.css';\nimport About from './About';\nimport { useState } from 'react';\n\nfunction App() {\n    const [videoId] = useState('Z3v0tEApe50')\n    return (\n        <About videoId={videoId} />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}