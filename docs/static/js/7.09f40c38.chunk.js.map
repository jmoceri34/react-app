{"version":3,"sources":["video-loop-tool/video-loop-tool.component.tsx"],"names":["VideoSlider","styled","Slider","theme","height","width","VideoLoopTool","props","state","changingVideo","player","startTimeHandle","endTimeHandle","startTimeValue","endTimeValue","sliderMaxValue","loopTimeout","delayTimer","urlParameters","queryStartTime","queryEndTime","playlists","URLSearchParams","window","location","search","storedPlaylists","localStorage","getItem","JSON","parse","videoId","get","videoDelay","parseInt","currentVideoDelay","selectedPlaylist","undefined","selectedVideoId","sliderValues","playThroughPlaylist","isNumeric","this","setTimeout","video","Videos","filter","v","Id","selectVideo","startVideo","callback","set","toString","newurl","protocol","host","pathname","history","pushState","path","clearInterval","setInterval","nextValue","setState","clearTimeout","loadVideoById","setupVideoPlayer","w","YT","loadPlayer","onYouTubePlayerAPIReady","$","getScript","Player","playerVars","modestbranding","rel","showinfo","loop","autoplay","mute","events","e","playerOnReady","playerOnStateChange","a","getDuration","duration","left","right","createSlider","unMute","seekTo","event","data","PlayerState","PLAYING","getCurrentTime","videos","nextVideo","i","length","pauseVideo","startDelayTimer","playVideo","PAUSED","ENDED","delay","milliseconds","Promise","result","min","max","newSlider","newLeftHandle","children","newRightHandle","remove","prepend","wrap","startTime","endTime","textContent","Date","toISOString","substr","value","format","px","DOMPurify","sanitize","StartTime","EndTime","document","getElementById","scrollIntoView","behavior","block","inline","VideoId","Delay","loopYouTubeVideo","target","playlist","checked","newValue","sliderMoved","playlistVideoHtml","map","videoIndex","variant","style","margin","padding","background","id","paddingBottom","display","flexWrap","flex","alt","Name","src","alignSelf","color","onClick","className","label","displayEmpty","renderValue","defaultValue","onChange","handlePlaylistDropdownChange","playlistIndex","control","defaultChecked","handlePlayThroughPlaylistChange","maxHeight","overflow","marginTop","element","marginLeft","marginRight","marginBottom","handleVideoIdChange","handleVideoDelayChange","backgroundColor","lineHeight","textAlign","toFixed","maxWidth","valueLabelFormat","handleSliderChange","valueLabelDisplay","Component"],"mappings":"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","file":"static/js/7.09f40c38.chunk.js","sourcesContent":["import $, { isNumeric } from 'jquery';\r\nimport { Component } from 'react';\r\nimport { Playlist } from '../playlists/playlist.model';\r\nimport { Video } from '../playlists/video.model';\r\nimport Slider from '@mui/material/Slider';\r\nimport { Button, Card, CardContent, Checkbox, FormControlLabel, FormGroup, MenuItem, Paper, Select, styled, TextField } from '@mui/material';\r\nimport DOMPurify from 'dompurify';\r\nimport './video-loop-tool.css';\r\n\r\nexport interface VideoLoopToolProps {\r\n\r\n}\r\n\r\nexport interface VideoLoopToolState {\r\n    videoId: string;\r\n    videoDelay: number;\r\n    currentVideoDelay: number;\r\n    selectedPlaylist: number | undefined;\r\n    selectedVideoId: number | undefined;\r\n    sliderValues: number[];\r\n    playThroughPlaylist: boolean;\r\n}\r\n\r\n\r\nconst VideoSlider = styled(Slider)(({ theme }) => ({\r\n    '& .MuiSlider-thumb': {\r\n        height: 36,\r\n        width: 36,\r\n    },\r\n    '& .MuiSlider-rail': {\r\n        height: 12, \r\n    },\r\n    '& .MuiSlider-track': {\r\n        height: 14,\r\n    },\r\n}));\r\n\r\n/**\r\n * Use this component to loop parts of YouTube videos\r\n * */\r\nexport default class VideoLoopTool extends Component<VideoLoopToolProps, VideoLoopToolState> {\r\n\r\n    /** The state of the component */\r\n    state: VideoLoopToolState;\r\n\r\n    /** to allow time between changing videos */\r\n    changingVideo: boolean;\r\n    player: YT.Player | undefined;\r\n    startTimeHandle: JQuery<any> | undefined;\r\n    endTimeHandle: JQuery<any> | undefined;\r\n\r\n    startTimeValue: number;\r\n    endTimeValue: number;\r\n    sliderMaxValue: number;\r\n\r\n    loopTimeout: NodeJS.Timer | undefined;\r\n    delayTimer: NodeJS.Timer | undefined;\r\n\r\n    urlParameters: URLSearchParams;\r\n    queryStartTime: string | null;\r\n    queryEndTime: string | null;\r\n\r\n    playlists: Playlist[];\r\n\r\n    constructor(props: VideoLoopToolProps) {\r\n        super(props);\r\n\r\n        // initialize the slider properties\r\n        this.startTimeValue = 0;\r\n        this.endTimeValue = 0;\r\n        this.sliderMaxValue = 0;\r\n\r\n        // get the query string parameters if any\r\n        this.urlParameters = new URLSearchParams(window.location.search);\r\n\r\n        // get the stored playlists if there are any\r\n        const storedPlaylists = localStorage.getItem(\"Playlists\");\r\n\r\n        this.playlists = storedPlaylists !== null ? JSON.parse(storedPlaylists) : [];\r\n\r\n        let selectedPlaylist : number | undefined = undefined;\r\n        let selectedVideoId: number | undefined = undefined;\r\n\r\n        this.state = {\r\n            videoId: this.urlParameters.get(\"v\")!,\r\n            videoDelay: this.urlParameters.get(\"d\") !== null ? parseInt(this.urlParameters.get(\"d\")!) : 0,\r\n            currentVideoDelay: 0,\r\n            selectedPlaylist: selectedPlaylist,\r\n            selectedVideoId: selectedVideoId,\r\n            sliderValues: [0, 0],\r\n            playThroughPlaylist: false,\r\n        }\r\n\r\n        // used when transitioning between videos\r\n        this.changingVideo = false;\r\n        this.queryStartTime = this.urlParameters.get(\"s\");\r\n        this.queryEndTime = this.urlParameters.get(\"e\");\r\n\r\n        // check the query string time values to always be numbers\r\n        if (!isNumeric(this.queryStartTime)) {\r\n            this.queryStartTime = '0';\r\n        }\r\n\r\n        if (!isNumeric(this.queryEndTime)) {\r\n            this.queryEndTime = '0';\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        // starting with a video id\r\n        if (this.state.videoId) {\r\n            // give it a second\r\n            setTimeout(() => {\r\n\r\n                // if we're on a playlist\r\n                if (this.state.selectedPlaylist !== undefined && this.state.selectedVideoId !== undefined) {\r\n                    let video = this.playlists[this.state.selectedPlaylist!].Videos.filter(v => v.Id === this.state.selectedVideoId)[0];\r\n\r\n                    if (video !== undefined) {\r\n                        this.selectVideo(video);\r\n                    }\r\n                    else {\r\n                        this.startVideo();\r\n                    }\r\n                }\r\n                else {\r\n                    this.startVideo();\r\n                }\r\n            }, 1000);\r\n        }\r\n    }\r\n\r\n    startDelayTimer(callback: any): void {\r\n\r\n        // set the query video id\r\n        this.urlParameters.set(\"d\", this.state.videoDelay.toString());\r\n        this.urlParameters.set(\"v\", this.state.videoId);\r\n\r\n        var newurl = window.location.protocol + \"//\" + window.location.host + window.location.pathname + \"?\" + this.urlParameters.toString();\r\n\r\n        window.history.pushState({ path: newurl }, '', newurl);\r\n\r\n        if (this.delayTimer) {\r\n            clearInterval(this.delayTimer!);\r\n        }\r\n\r\n        if (this.state.videoDelay == 0) {\r\n            callback();\r\n            return;\r\n        }\r\n\r\n        this.state.currentVideoDelay = this.state.videoDelay;\r\n\r\n        // trigger check every 0.1 seconds\r\n        this.delayTimer = setInterval(() => {\r\n\r\n            let nextValue = this.state.currentVideoDelay - 0.1;\r\n\r\n            if (nextValue < 0) {\r\n                this.setState({\r\n                    currentVideoDelay: 0\r\n                });\r\n\r\n                clearInterval(this.delayTimer!);\r\n\r\n                callback();\r\n\r\n                return;\r\n            }\r\n\r\n            this.setState({\r\n                currentVideoDelay: nextValue\r\n            });\r\n        }, 100);\r\n    }\r\n\r\n    loopYouTubeVideo(): void {\r\n\r\n        // if the player already exists, load the video\r\n        if (this.player) {\r\n\r\n            // clear the timeout\r\n            if (this.loopTimeout) {\r\n                clearTimeout(this.loopTimeout);\r\n            }\r\n\r\n            // load the new video\r\n            this.player.loadVideoById(this.state.videoId);\r\n\r\n            // setup the player with the new values\r\n            this.setupVideoPlayer();\r\n\r\n            // return early\r\n            return;\r\n        }\r\n\r\n        let w = (window as any);\r\n\r\n        // if YT hasn't been downloaded yet\r\n        if (!w.YT) {\r\n            // set the call back to load the player once this global callback from youtube is executed\r\n            w.onYouTubePlayerAPIReady = () => {\r\n                this.loadPlayer(this.state.videoId);\r\n            };\r\n\r\n            // go and get the script in the meantime\r\n            $.getScript('https://www.youtube.com/player_api');\r\n        }\r\n        // otherwise load the player\r\n        else {\r\n            this.loadPlayer(this.state.videoId);\r\n        }\r\n    }\r\n\r\n    loadPlayer(videoId: any): void {\r\n        this.player = new (window as any).YT.Player('player', {\r\n            playerVars: {\r\n                modestbranding: 1,\r\n                rel: 0,\r\n                showinfo: 0,\r\n                loop: 1,\r\n                autoplay: 1,\r\n                mute: 1\r\n            },\r\n            height: 360,\r\n            width: '100%',\r\n            videoId: videoId,\r\n            events: {\r\n                'onReady': (e: any) => this.playerOnReady(e),\r\n                'onStateChange': (e: any) => this.playerOnStateChange(e)\r\n            }\r\n        });\r\n    }\r\n\r\n    setupVideoPlayer(): void {\r\n\r\n        // duration can be accessed when it's playing, mute it first\r\n        this.player!.mute();\r\n        // timeout to wait for duration\r\n        setTimeout(async () => {\r\n\r\n            // get the duration\r\n            var duration = await this.getDuration();\r\n\r\n            var left = parseInt(this.queryStartTime!) || 0;\r\n            var right = parseInt(this.queryEndTime!) || duration;\r\n\r\n            this.sliderMaxValue = duration;\r\n\r\n            this.createSlider(left, right);\r\n\r\n            // unmute it and play at the start time\r\n            this.player!.unMute();\r\n\r\n            setTimeout(() => {\r\n                this.player!.seekTo(this.startTimeValue, true);\r\n            });\r\n        });\r\n    }\r\n\r\n    playerOnReady(e: any): void {\r\n\r\n        // setup the video player on ready\r\n        this.setupVideoPlayer();\r\n    }\r\n\r\n    playerOnStateChange(event: any): void {\r\n\r\n        // if the video is playing\r\n        if (event.data === (window as any).YT.PlayerState.PLAYING) {\r\n\r\n            // if the current time is less than the start time, seek to the start time\r\n            if (this.player && this.player.getCurrentTime() < this.startTimeValue) {\r\n                this.player.seekTo(this.startTimeValue, true);\r\n            }\r\n\r\n            // periodically check every 1 second to see if we should loop the video or select the next video in the playlist if selected\r\n            this.loopTimeout = setInterval(() => {\r\n\r\n                if (!this.player!.getCurrentTime) {\r\n                    return;\r\n                }\r\n\r\n                var currentTime = this.player!.getCurrentTime();\r\n\r\n                // nothing to check\r\n                if (currentTime < this.endTimeValue) {\r\n                    return;\r\n                }\r\n\r\n                if (this.changingVideo) {\r\n                    return;\r\n                }\r\n\r\n                if (this.state.selectedPlaylist !== undefined && this.state.playThroughPlaylist) {\r\n\r\n                    this.changingVideo = true;\r\n\r\n                    let videos = this.playlists[this.state.selectedPlaylist!].Videos;\r\n                    let nextVideo: Video | undefined = undefined;\r\n\r\n                    for (let i = 0; i < videos.length; i++) {\r\n                        if (videos[i].Id === this.state.selectedVideoId) {\r\n                            if (i === videos.length - 1) {\r\n                                nextVideo = videos[0];\r\n                            }\r\n                            else {\r\n                                nextVideo = videos[i + 1];\r\n                            }\r\n\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    // found the next video, skip ahead to it\r\n                    if (nextVideo !== undefined) {\r\n                        this.selectVideo(nextVideo!);\r\n                    }\r\n                    // video doesn't exist on playlist\r\n                    else {\r\n                        this.player!.seekTo(this.startTimeValue, true);\r\n                    }\r\n\r\n                    setTimeout(() => {\r\n                        this.changingVideo = false;\r\n                    }, 1000);\r\n                }\r\n                // repeat if it's not checked\r\n                else {\r\n\r\n                    if (this.state.videoDelay > 0) {\r\n                        this.player!.pauseVideo();\r\n                        this.player!.seekTo(this.startTimeValue, true);\r\n\r\n                        this.startDelayTimer(() => {\r\n                            this.player!.playVideo();\r\n                        });\r\n\r\n                    }\r\n                    else {\r\n                        this.player!.seekTo(this.startTimeValue, true);\r\n                    }\r\n                }\r\n            }, 1000);\r\n        }\r\n        else if (event.data === (window as any).YT.PlayerState.PAUSED) {\r\n            if (this.loopTimeout) {\r\n                clearTimeout(this.loopTimeout);\r\n            }\r\n        }\r\n        else if (event.data === (window as any).YT.PlayerState.ENDED) {\r\n            if (this.loopTimeout) {\r\n                clearTimeout(this.loopTimeout);\r\n            }\r\n\r\n            this.player!.seekTo(this.startTimeValue, true);\r\n        }\r\n    }\r\n\r\n    async getDuration(): Promise<number> {\r\n        if (!this.player) {\r\n            return await 0;\r\n        }\r\n\r\n        let duration = this.player.getDuration();\r\n\r\n        while (!duration || duration === 0) {\r\n            duration = this.player.getDuration();\r\n            await this.delay(500);\r\n        }\r\n\r\n        return duration;\r\n    }\r\n\r\n    delay(milliseconds: number): Promise<unknown> {\r\n        const result = new Promise<unknown>(result => setTimeout(result, milliseconds));\r\n\r\n        return result;\r\n    }\r\n\r\n    createSlider(min: number, max: number): void {\r\n\r\n        let newSlider = $(\".videoSlider\")[0] as any;\r\n        let newLeftHandle = $(newSlider.children[newSlider.children.length - 2]);\r\n        let newRightHandle = $(newSlider.children[newSlider.children.length - 1]);\r\n\r\n        // remove the old elements if found\r\n        if (newLeftHandle.children(\"#videoSliderTime\").length > 0) {\r\n            newLeftHandle.children(\"#videoSliderTime\").remove();\r\n        }\r\n\r\n        if (newRightHandle.children(\"#videoSliderTime\").length > 0) {\r\n            newRightHandle.children(\"#videoSliderTime\").remove();\r\n        }\r\n\r\n        min = min < 0 ? 0 : min;\r\n\r\n        // create the new handles for the slider with the times included\r\n        this.startTimeHandle = newLeftHandle.prepend(this.wrap(min, true, true));\r\n        this.endTimeHandle = newRightHandle.prepend(this.wrap(max, true, false));\r\n\r\n        // keep track of the video time values\r\n        this.startTimeValue = min;\r\n        this.endTimeValue = max;\r\n\r\n        // update the query string when creating the slider\r\n        this.urlParameters.set(\"s\", this.startTimeValue.toString());\r\n        this.urlParameters.set(\"e\", this.endTimeValue.toString());\r\n\r\n        var newurl = window.location.protocol + \"//\" + window.location.host + window.location.pathname + \"?\" + this.urlParameters.toString();\r\n        window.history.pushState({ path: newurl }, '', newurl);\r\n\r\n        this.setState({\r\n            sliderValues: [this.startTimeValue, this.endTimeValue]\r\n        });\r\n    }\r\n\r\n    sliderMoved(startTime: any, endTime: any): void {\r\n\r\n        // update the video time values\r\n        this.startTimeValue = startTime;\r\n        this.endTimeValue = endTime;\r\n\r\n        // Update the new time handle values with the new value\r\n        if (this.startTimeHandle) {\r\n            this.startTimeHandle[0].children[0].textContent = new Date(this.startTimeValue * 1000).toISOString().substr(11, 8);\r\n            // update the query string parameter\r\n            this.urlParameters.set(\"s\", this.startTimeValue.toString());\r\n        }\r\n\r\n        if (this.endTimeHandle) {\r\n            this.endTimeHandle[0].children[0].textContent = new Date(this.endTimeValue * 1000).toISOString().substr(11, 8);\r\n            // update the query string parameter\r\n            this.urlParameters.set(\"e\", this.endTimeValue.toString());\r\n        }\r\n\r\n        var newurl = window.location.protocol + \"//\" + window.location.host + window.location.pathname + \"?\" + this.urlParameters.toString();\r\n\r\n        window.history.pushState({ path: newurl }, '', newurl);\r\n\r\n        // check for bounds and start from the beginning if needed\r\n        if (this.player!.getCurrentTime() < this.startTimeValue || this.player!.getCurrentTime() > this.endTimeValue) {\r\n            this.player!.seekTo(this.startTimeValue, true);\r\n        }\r\n    }\r\n\r\n    wrap(value: number, format: boolean, left: boolean): string {\r\n        let result: string = value.toString();\r\n\r\n        if (format) {\r\n            result = new Date(value * 1000).toISOString().substr(11, 8);\r\n        }\r\n\r\n        // give enough distance to the time values\r\n        var px = left ? \"-13px\" : \"57px\";\r\n\r\n        // sanitize the string since we're adding it ourselves\r\n        return DOMPurify.sanitize('<span id=\"videoSliderTime\" style=\"color: #000 !important; font-family: Roboto, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 400; position: absolute !important; bottom: -50px; left: ' + px + ';\">' + result + '</span>');\r\n    }\r\n\r\n    selectVideo(video: Video): void {\r\n        this.queryStartTime = video.StartTime.toString();\r\n        this.queryEndTime = video.EndTime.toString();\r\n\r\n        // grab the element and scroll it into view\r\n        let e = document.getElementById('video-' + video.Id);\r\n\r\n        e?.scrollIntoView({\r\n            behavior: \"smooth\",\r\n            block: 'center',\r\n            inline: 'center'\r\n        });\r\n\r\n        this.setState({\r\n            videoId: video.VideoId,\r\n            selectedVideoId: video.Id,\r\n            videoDelay: video.Delay,\r\n            currentVideoDelay: 0,\r\n        }, () => {\r\n\r\n            this.startVideo();\r\n        });\r\n    }\r\n\r\n    startVideo(): void {\r\n\r\n        if (this.sliderMaxValue > 0) {\r\n            this.player!.pauseVideo();\r\n        }\r\n\r\n        this.startDelayTimer(() => {\r\n            this.loopYouTubeVideo();\r\n        });\r\n    }\r\n\r\n    handleVideoDelayChange(e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>): void {\r\n        this.setState({\r\n            videoDelay: isNumeric(e.target.value) ? parseInt(e.target.value) : 0\r\n        });\r\n    }\r\n\r\n    // keep track when the user enters a new video id\r\n    handleVideoIdChange(e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>): void {\r\n        this.setState({\r\n            videoId: e.target.value\r\n        });\r\n    }\r\n\r\n    handlePlaylistDropdownChange(e: any): void {\r\n\r\n        let playlist = isNumeric(e.target.value) ? parseInt(e.target.value) : undefined;\r\n\r\n        this.setState({\r\n            selectedPlaylist: playlist,\r\n            selectedVideoId: undefined // reset the video id when changing playlists\r\n        });\r\n    }\r\n\r\n    handlePlayThroughPlaylistChange(e: React.ChangeEvent<HTMLInputElement>, checked: boolean): void {\r\n        this.setState({\r\n            playThroughPlaylist: checked\r\n        });\r\n    }\r\n\r\n    handleSliderChange(e: Event, newValue: number | number[]): void {\r\n\r\n        let v = newValue as number[];\r\n\r\n        this.sliderMoved(v[0], v[1]);\r\n\r\n        this.setState({\r\n            sliderValues: v\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let playlistVideoHtml: JSX.Element[] = [];\r\n        // if a playlist is selected, show the videos\r\n        if (this.state.selectedPlaylist !== undefined) {\r\n            playlistVideoHtml = this.playlists[this.state.selectedPlaylist!].Videos.map((video, videoIndex) => {\r\n                return (\r\n                    <Card key={video.Id} variant=\"outlined\" style={{ margin: '12px', padding: '0 !important', background: video.Id === this.state.selectedVideoId ? '#ccc' : '#fff' }} id={'video-' + video.Id}>\r\n                            <CardContent key={video.Id} style={{ paddingBottom: '0 !important' }}>\r\n                                <div key={video.Id} style={{ display: 'flex', flexWrap: 'wrap' }}>\r\n                                {\r\n                                    video.Id === this.state.selectedVideoId && (\r\n                                        <h6 style={{flex: '0 0 100%'}}>Currently playing</h6>\r\n                                    )\r\n                                }\r\n                                <img alt={video.Name} src={\"https://img.youtube.com/vi/\" + video.VideoId + \"/hqdefault.jpg\"} style={{ width: '80x', height: '45px', \"marginRight\": \"12px\", paddingBottom: '12px' }} />\r\n\r\n                                <div style={{ alignSelf: 'center' }} key={video.Id}>\r\n                                    <Button variant=\"contained\" color=\"primary\" onClick={(e) => { this.selectVideo(video) }} style={{ \"marginRight\": \"12px\" }}>\r\n                                        Select\r\n                                    </Button>\r\n                                </div>\r\n                                <p><strong>{video.Name} ({video.StartTime}s - {video.EndTime}s)</strong>({video.Delay}s delay)</p>\r\n                            </div>\r\n                        </CardContent>\r\n                    </Card>\r\n                );\r\n            });\r\n        }\r\n\r\n        return (\r\n            <Card variant=\"outlined\" style={{ margin: '12px', padding: '0 !important', 'minHeight': '950px' }}>\r\n                <CardContent style={{ padding: '0 !important' }}>\r\n                    <div style={{ 'textAlign': \"left\", 'margin': '0 auto', display: 'flex' }} className=\"outerContainer\">\r\n                        <div className=\"playlistsContainer\">\r\n                            <div style={{ display: 'block', 'textAlign': 'left' }}>\r\n                                <div>\r\n                                    <h1>Playlists</h1>\r\n                                    <Select\r\n                                        label=\"Playlists\"\r\n                                        displayEmpty\r\n                                        renderValue={this.state.selectedPlaylist !== undefined ? () => this.playlists[this.state.selectedPlaylist!].Name : () => 'Playlists'}\r\n                                        defaultValue=\"Playlists\"\r\n                                        onChange={e => this.handlePlaylistDropdownChange(e)}\r\n                                        style={{ 'minWidth': '200px'}}>\r\n                                        {\r\n                                            [\r\n                                                <MenuItem key={\"none\"} value={undefined}>None</MenuItem>,\r\n                                                this.playlists.map((playlist, playlistIndex) => {\r\n                                                    return (\r\n                                                        <MenuItem key={playlist.Id} value={playlistIndex}>#{playlist.Id}: {playlist.Name}</MenuItem>\r\n                                                    );\r\n                                                })\r\n                                            ]\r\n                                        }\r\n                                    </Select>\r\n                                    <FormGroup style={{ display: this.state.selectedPlaylist !== undefined ? 'block' : 'none' }}>\r\n                                        <FormControlLabel control={<Checkbox defaultChecked={this.state.playThroughPlaylist} onChange={(e: React.ChangeEvent<HTMLInputElement>, checked: boolean) => this.handlePlayThroughPlaylistChange(e, checked)} />} label=\"Play through Playlist\" />\r\n                                    </FormGroup>\r\n                                    <Paper style={{ maxHeight: '500px', overflow: 'auto', marginTop: '12px' }}>\r\n                                        {\r\n                                            playlistVideoHtml.map(element => {\r\n                                                return element;\r\n                                            })\r\n                                        }\r\n                                    </Paper>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div style={{ width: '100%', marginLeft: '42px', marginRight: '96px'}}>\r\n                            <h1>Video Loop Tool</h1>\r\n                            <div style={{ display: 'flex', marginBottom: '12px' }}>\r\n                                <Button variant=\"contained\" color=\"primary\" onClick={() => { this.startVideo(); }} style={{ 'marginTop': \"12px\", 'marginRight': '12px' }}>\r\n                                    Start\r\n                                </Button>\r\n                                <TextField id=\"standard-basic\" label=\"YouTube VideoID\" value={this.state ? this.state.videoId || '' : ''} style={{ width: \"200px\" }} onChange={e => this.handleVideoIdChange(e)} />\r\n                                <TextField id=\"standard-basic\" label=\"Video Delay\" value={this.state ? this.state.videoDelay || 0 : 0} style={{ width: \"200px\" }} onChange={e => this.handleVideoDelayChange(e)} />\r\n                            </div>\r\n                            <div style={{ display: this.state.currentVideoDelay > 0 ? 'block' : 'none', width: '640px', height: '480px', backgroundColor: '#333', lineHeight: '480px' }}>\r\n                                <h1 style={{ margin: '0px', textAlign: 'center', color: '#fff' }}>{this.state.currentVideoDelay.toFixed(1)}s</h1>\r\n                            </div>\r\n                            <div className=\"auto-resizable-iframe\" style={{ display: this.player ? 'block' : 'none' }}>\r\n                                <div className=\"playerWrapper\" style={{ display: (this.state.currentVideoDelay == 0) ? 'block' : 'none'}}>\r\n                                    <div id=\"player\"></div>\r\n                                </div>\r\n                                <div style={{ display: 'flex', marginTop: '36px', maxWidth: '100%' }}>\r\n                                    <VideoSlider\r\n                                        value={this.state.sliderValues}\r\n                                        valueLabelFormat={(v) => v + 's'}\r\n                                        onChange={(e: Event, newValue: number | number[]) => this.handleSliderChange(e, newValue)}\r\n                                        valueLabelDisplay=\"auto\"\r\n                                        min={0}\r\n                                        max={this.sliderMaxValue}\r\n                                        className={\"videoSlider\"}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    </CardContent>\r\n                </Card>\r\n        );\r\n    }\r\n};"],"sourceRoot":""}