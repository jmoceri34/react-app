{"version":3,"sources":["video-loop-tool/video-loop-tool.component.tsx"],"names":["VideoSlider","styled","Slider","theme","height","width","VideoLoopTool","props","state","changingVideo","player","leftHandle","rightHandle","leftValue","rightValue","loopTimeout","urlParameters","queryStartTime","queryEndTime","playlists","URLSearchParams","window","location","search","storedPlaylists","localStorage","getItem","JSON","parse","selectedPlaylist","undefined","length","videoId","get","sliderValues","playThroughPlaylist","isNumeric","setTimeout","video","Videos","filter","v","VideoId","selectVideo","startLoop","e","this","setState","target","value","set","loadVideoById","clearTimeout","duration","getDuration","left","right","createSlider","seekTo","w","YT","loadPlayer","onYouTubePlayerAPIReady","$","getScript","Delay","stopVideo","startLoopInternal","min","max","newSlider","newLeftHandle","children","newRightHandle","remove","prepend","wrap","newurl","protocol","host","pathname","toString","history","pushState","path","startTime","endTime","textContent","Date","toISOString","substr","getCurrentTime","format","result","px","DOMPurify","sanitize","Player","playerVars","modestbranding","rel","showinfo","autoplay","mute","events","event","data","PlayerState","PLAYING","setInterval","videos","nextVideo","i","PAUSED","ENDED","StartTime","EndTime","document","getElementById","Id","scrollIntoView","behavior","block","inline","parseInt","newValue","sliderMoved","checked","playlistVideoHtml","map","videoIndex","variant","style","margin","padding","background","id","paddingBottom","display","flexWrap","flex","src","alignSelf","color","onClick","Name","className","label","displayEmpty","renderValue","defaultValue","onChange","handlePlaylistDropdownChange","playlist","playlistIndex","control","defaultChecked","handlePlayThroughPlaylistChange","maxHeight","overflow","marginTop","element","marginLeft","marginRight","marginBottom","handleChange","maxWidth","valueLabelFormat","handleSliderChange","valueLabelDisplay","Component"],"mappings":"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","file":"static/js/8.ab965376.chunk.js","sourcesContent":["import $, { isNumeric } from 'jquery';\r\nimport { Component } from 'react';\r\nimport { Playlist } from '../playlists/playlist.model';\r\nimport { Video } from '../playlists/video.model';\r\nimport Slider from '@mui/material/Slider';\r\nimport { Button, Card, CardContent, Checkbox, FormControlLabel, FormGroup, MenuItem, Paper, Select, styled, TextField } from '@mui/material';\r\nimport DOMPurify from 'dompurify';\r\nimport './video-loop-tool.css';\r\n\r\nexport interface VideoLoopToolProps {\r\n\r\n}\r\n\r\nexport interface VideoLoopToolState {\r\n    videoId: string;\r\n    selectedPlaylist: number | undefined;\r\n    sliderValues: number[];\r\n    playThroughPlaylist: boolean;\r\n}\r\n\r\n\r\nconst VideoSlider = styled(Slider)(({ theme }) => ({\r\n    '& .MuiSlider-thumb': {\r\n        height: 36,\r\n        width: 36,\r\n    },\r\n    '& .MuiSlider-rail': {\r\n        height: 12, \r\n    },\r\n    '& .MuiSlider-track': {\r\n        height: 14,\r\n    },\r\n}));\r\n\r\nexport default class VideoLoopTool extends Component<VideoLoopToolProps, VideoLoopToolState> {\r\n\r\n    state: VideoLoopToolState;\r\n\r\n    changingVideo: boolean;\r\n    player: any;\r\n    leftHandle: any;\r\n    rightHandle: any;\r\n    leftValue: any;\r\n    rightValue: any;\r\n    loopTimeout: any;\r\n    urlParameters: URLSearchParams;\r\n    queryStartTime: any;\r\n    queryEndTime: any;\r\n    playlists: Playlist[];\r\n\r\n    constructor(props: VideoLoopToolProps) {\r\n        super(props);\r\n\r\n        // get the query string parameters if any\r\n        this.urlParameters = new URLSearchParams(window.location.search);\r\n\r\n        const storedPlaylists = localStorage.getItem(\"Playlists\");\r\n\r\n        this.playlists = storedPlaylists !== null ? JSON.parse(storedPlaylists) : [];\r\n\r\n        let selectedPlaylist : number | undefined = undefined;\r\n\r\n        // show the first playlist if there are any\r\n        if (this.playlists.length > 0) {\r\n            selectedPlaylist = 0;\r\n        }\r\n\r\n        this.state = {\r\n            videoId: this.urlParameters.get(\"v\")!,\r\n            selectedPlaylist: selectedPlaylist,\r\n            sliderValues: [0, 0],\r\n            playThroughPlaylist: false,\r\n        }\r\n\r\n        this.changingVideo = false;\r\n        this.queryStartTime = this.urlParameters.get(\"s\");\r\n        this.queryEndTime = this.urlParameters.get(\"e\");\r\n\r\n        if (!isNumeric(this.queryStartTime)) {\r\n            this.queryStartTime = 0;\r\n        }\r\n\r\n        if (!isNumeric(this.queryEndTime)) {\r\n            this.queryEndTime = 0;\r\n        }\r\n\r\n        if (this.state && this.state.videoId) {\r\n            setTimeout(() => {\r\n                if (selectedPlaylist !== undefined) {\r\n                    let video = this.playlists[selectedPlaylist!].Videos.filter(v => v.VideoId == this.state.videoId)[0];\r\n\r\n                    if (video !== undefined) {\r\n                        this.selectVideo(video);\r\n                    }\r\n                    else {\r\n                        this.startLoop();\r\n                    }\r\n                }\r\n                else {\r\n                    this.startLoop();\r\n                }\r\n            }, 1000);\r\n        }\r\n    }\r\n\r\n    // keep track when the user enters a new video id\r\n    handleChange(e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>): void {\r\n        this.setState({\r\n            videoId: e.target.value\r\n        });\r\n    }\r\n\r\n    startLoopInternal(): void {\r\n        // set the query video id\r\n        this.urlParameters.set(\"v\", this.state.videoId);\r\n\r\n        // if the player already exists, load the video\r\n        if (this.player) {\r\n            this.player.loadVideoById(this.state.videoId);\r\n\r\n            if (this.loopTimeout) {\r\n                clearTimeout(this.loopTimeout);\r\n            }\r\n\r\n            setTimeout(() => {\r\n                var duration = this.player.getDuration();\r\n\r\n                var left = this.queryStartTime || 0;\r\n                var right = this.queryEndTime || duration;\r\n\r\n                this.createSlider(left, right);\r\n\r\n                this.player.seekTo(this.leftValue, true);\r\n\r\n            }, 500);\r\n\r\n            return;\r\n        }\r\n\r\n        let w = (window as any);\r\n\r\n        // if YT hasn't been downloaded yet\r\n        if (!w.YT) {\r\n            // set the call back to load the player once this global callback from youtube is executed\r\n            w.onYouTubePlayerAPIReady = () => {\r\n                this.loadPlayer(this.state.videoId);\r\n            };\r\n\r\n            // go and get the script in the meantime\r\n            $.getScript('https://www.youtube.com/player_api');\r\n        }\r\n        // otherwise load the player\r\n        else {\r\n            this.loadPlayer(this.state.videoId);\r\n        }\r\n    }\r\n\r\n    startLoop(): void {\r\n        if (this.state.selectedPlaylist !== undefined) {\r\n            let video = this.playlists[this.state.selectedPlaylist].Videos.filter(v => v.VideoId == this.state.videoId)[0];\r\n\r\n            if (video !== undefined && video.Delay > 0) {\r\n                if (this.player) {\r\n                    this.player.stopVideo();\r\n                }\r\n                setTimeout(() => {\r\n                    this.startLoopInternal();\r\n                }, video.Delay * 1000);\r\n            }\r\n            else {\r\n                this.startLoopInternal();\r\n            }\r\n        }\r\n        else {\r\n            this.startLoopInternal();\r\n        }\r\n    }\r\n\r\n    createSlider(min: number, max: number): void {\r\n\r\n        let newSlider = $(\".videoSlider\")[0] as any;\r\n        let newLeftHandle = $(newSlider.children[newSlider.children.length - 2]);\r\n        let newRightHandle = $(newSlider.children[newSlider.children.length - 1]);\r\n\r\n        if (newLeftHandle.children(\"#videoSliderTime\").length > 0) {\r\n            newLeftHandle.children(\"#videoSliderTime\").remove();\r\n        }\r\n\r\n        if (newRightHandle.children(\"#videoSliderTime\").length > 0) {\r\n            newRightHandle.children(\"#videoSliderTime\").remove();\r\n        }\r\n\r\n        min = min < 0 ? 0 : min;\r\n        max = max > this.player.getDuration() ? this.player.getDuration() : max;\r\n\r\n        this.leftHandle = newLeftHandle.prepend(this.wrap(min, true, true));\r\n        this.rightHandle = newRightHandle.prepend(this.wrap(max, true, false));\r\n\r\n        this.leftValue = min;\r\n        this.rightValue = max;\r\n\r\n        // update the query string when creating the slider\r\n        this.urlParameters.set(\"s\", this.leftValue);\r\n        this.urlParameters.set(\"e\", this.rightValue);\r\n\r\n        var newurl = window.location.protocol + \"//\" + window.location.host + window.location.pathname + \"?\" + this.urlParameters.toString();\r\n        window.history.pushState({ path: newurl }, '', newurl);\r\n\r\n        this.setState({\r\n            sliderValues: [this.leftValue, this.rightValue]\r\n        });\r\n    }\r\n\r\n    sliderMoved(startTime: any, endTime: any): void {\r\n\r\n        this.leftValue = startTime;\r\n        this.rightValue = endTime;\r\n\r\n        if (this.leftHandle) {\r\n            this.leftHandle[0].children[0].textContent = new Date(this.leftValue * 1000).toISOString().substr(11, 8);\r\n            // update the query string parameter\r\n            this.urlParameters.set(\"s\", this.leftValue);\r\n        }\r\n\r\n        if (this.rightHandle) {\r\n            this.rightHandle[0].children[0].textContent = new Date(this.rightValue * 1000).toISOString().substr(11, 8);\r\n            // update the query string parameter\r\n            this.urlParameters.set(\"e\", this.rightValue);\r\n        }\r\n\r\n        var newurl = window.location.protocol + \"//\" + window.location.host + window.location.pathname + \"?\" + this.urlParameters.toString();\r\n\r\n        window.history.pushState({ path: newurl }, '', newurl);\r\n\r\n        if (this.player.getCurrentTime() < this.leftValue || this.player.getCurrentTime() > this.rightValue) {\r\n            this.player.seekTo(this.leftValue, true);\r\n        }\r\n    }\r\n\r\n    wrap(value: number, format: boolean, left: boolean): string {\r\n        let result: string = value.toString();\r\n        if (format) {\r\n            result = new Date(value * 1000).toISOString().substr(11, 8);\r\n        }\r\n        var px = left ? \"-13px\" : \"57px\";\r\n        return DOMPurify.sanitize('<span id=\"videoSliderTime\" style=\"color: #000 !important; font-family: Roboto, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 400; position: absolute !important; bottom: -50px; left: ' + px + ';\">' + result + '</span>');\r\n    }\r\n\r\n    loadPlayer(videoId: any): void {\r\n        this.player = new (window as any).YT.Player('player', {\r\n            playerVars: {\r\n                modestbranding: 1,\r\n                rel: 0,\r\n                showinfo: 0,\r\n                autoplay: 0,\r\n                mute: 0\r\n            },\r\n            height: 360,\r\n            width: '100%',\r\n            videoId: videoId,\r\n            events: {\r\n                'onReady': (e: any) => {\r\n                    var duration = this.player.getDuration();\r\n\r\n                    var left = this.queryStartTime || 0;\r\n                    var right = this.queryEndTime || duration;\r\n\r\n                    this.createSlider(left, right);\r\n\r\n                    this.player.seekTo(this.leftValue, true);\r\n                },\r\n                'onStateChange': (event: any) => {\r\n                    if (event.data == (window as any).YT.PlayerState.PLAYING) {\r\n\r\n                        if (this.player && this.player.getCurrentTime() < this.leftValue) {\r\n                            this.player.seekTo(this.leftValue, true);\r\n                        }\r\n\r\n                        this.loopTimeout = setInterval(() => {\r\n                            var currentTime = this.player.getCurrentTime();\r\n\r\n                            if (currentTime >= this.rightValue && this.rightValue !== 0) {\r\n                                if (this.state.playThroughPlaylist && !this.changingVideo) {\r\n\r\n                                    this.changingVideo = true;\r\n\r\n                                    let videos = this.playlists[this.state.selectedPlaylist!].Videos;\r\n                                    let nextVideo: Video | undefined = undefined;\r\n\r\n                                    for (let i = 0; i < videos.length; i++) {\r\n                                        if (videos[i].VideoId == this.state.videoId) {\r\n                                            if (i == videos.length - 1) {\r\n                                                nextVideo = videos[0];\r\n                                            }\r\n                                            else {\r\n                                                nextVideo = videos[i + 1];\r\n                                            }\r\n\r\n                                            break;\r\n                                        }\r\n                                    }\r\n\r\n                                    // found the next video, skip ahead to it\r\n                                    if (nextVideo !== undefined) {\r\n                                        this.selectVideo(nextVideo!);\r\n                                    }\r\n                                    // video doesn't exist on playlist\r\n                                    else {\r\n                                        this.player.seekTo(this.leftValue, true);\r\n                                    }\r\n\r\n                                    setInterval(() => {\r\n                                        this.changingVideo = false;\r\n                                    }, 1000);\r\n                                }\r\n                                // repeat if it's not checked\r\n                                else {\r\n                                    this.player.seekTo(this.leftValue, true);\r\n                                }\r\n                            }\r\n                        }, 1000);\r\n                    }\r\n                    else if (event.data == (window as any).YT.PlayerState.PAUSED) {\r\n                        if (this.loopTimeout) {\r\n                            clearTimeout(this.loopTimeout);\r\n                        }\r\n                    }\r\n                    else if (event.data == (window as any).YT.PlayerState.ENDED) {\r\n                        if (this.loopTimeout) {\r\n                            clearTimeout(this.loopTimeout);\r\n                        }\r\n\r\n                        this.player.seekTo(this.leftValue, true);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    selectVideo(video: Video): void {\r\n        this.queryStartTime = video.StartTime;\r\n        this.queryEndTime = video.EndTime;\r\n\r\n        let e = document.getElementById('video-' + video.Id);\r\n\r\n        e?.scrollIntoView({\r\n            behavior: \"smooth\",\r\n            block: 'center',\r\n            inline: 'center'\r\n        });\r\n\r\n        this.setState({\r\n            videoId: video.VideoId\r\n        }, () => {\r\n            this.startLoop();\r\n        });\r\n    }\r\n\r\n    handlePlaylistDropdownChange(e: any): void {\r\n        this.setState({\r\n            selectedPlaylist: parseInt(e.target.value)\r\n        });\r\n    }\r\n\r\n    handleSliderChange(e: Event, newValue: number | number[]): void {\r\n\r\n        let v = newValue as number[];\r\n\r\n        this.sliderMoved(v[0], v[1]);\r\n\r\n        this.setState({\r\n            sliderValues: v\r\n        });\r\n    }\r\n\r\n    handlePlayThroughPlaylistChange(e: React.ChangeEvent<HTMLInputElement>, checked: boolean): void {\r\n        this.setState({\r\n            playThroughPlaylist: checked\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let playlistVideoHtml: JSX.Element[] = [];\r\n        if (this.state.selectedPlaylist !== undefined) {\r\n            playlistVideoHtml = this.playlists[this.state.selectedPlaylist!].Videos.map((video, videoIndex) => {\r\n                return (\r\n                    <Card key={video.Id} variant=\"outlined\" style={{ margin: '12px', padding: '0 !important', background: video.VideoId === this.state.videoId ? '#ccc' : '#fff' }} id={'video-' + video.Id}>\r\n                            <CardContent key={video.Id} style={{ paddingBottom: '0 !important' }}>\r\n                                <div key={video.Id} style={{ display: 'flex', flexWrap: 'wrap' }}>\r\n                                {video.VideoId === this.state.videoId && (\r\n                                    <h6 style={{flex: '0 0 100%'}}>Currently playing</h6>\r\n                                    )}\r\n                                <img src={\"https://img.youtube.com/vi/\" + video.VideoId + \"/hqdefault.jpg\"} style={{ width: '80x', height: '45px', \"marginRight\": \"12px\", paddingBottom: '12px' }} />\r\n\r\n                                    <div style={{ alignSelf: 'center' }} key={video.Id}>\r\n                                    <Button variant=\"contained\" color=\"primary\" onClick={() => { this.selectVideo(video) }} style={{ \"marginRight\": \"12px\" }}>\r\n                                        Select\r\n                                    </Button>\r\n                                </div>\r\n                                <p>{video.Name} ({video.StartTime}s - {video.EndTime}s)</p>\r\n                            </div>\r\n                        </CardContent>\r\n                    </Card>\r\n                );\r\n            });\r\n        }\r\n\r\n        return (\r\n            <Card variant=\"outlined\" style={{ margin: '12px', padding: '0 !important', 'minHeight': '950px' }}>\r\n                <CardContent style={{ padding: '0 !important' }}>\r\n                    <div style={{ 'textAlign': \"left\", 'margin': '0 auto', display: 'flex' }} className=\"outerContainer\">\r\n                        <div className=\"playlistsContainer\">\r\n                            <div style={{ display: 'block', 'textAlign': 'left' }}>\r\n                                <div>\r\n                                    <h1>Playlists</h1>\r\n                                    <Select\r\n                                        label=\"Playlists\"\r\n                                        displayEmpty\r\n                                        renderValue={this.state.selectedPlaylist !== undefined ? () => this.playlists[this.state.selectedPlaylist!].Name : () => 'Playlists'}\r\n                                        defaultValue=\"Playlists\"\r\n                                        onChange={e => this.handlePlaylistDropdownChange(e)}\r\n                                        style={{ 'minWidth': '200px'}}>\r\n                                        {\r\n                                            this.playlists.map((playlist, playlistIndex) => {\r\n                                                return (\r\n                                                    <MenuItem key={playlist.Id} value={playlistIndex}>#{playlist.Id}: {playlist.Name}</MenuItem>\r\n                                                );\r\n                                            })\r\n                                        }\r\n                                    </Select>\r\n                                    <FormGroup>\r\n                                        <FormControlLabel control={<Checkbox defaultChecked={false} onChange={(e: React.ChangeEvent<HTMLInputElement>, checked: boolean) => this.handlePlayThroughPlaylistChange(e, checked)} />} label=\"Play through Playlist\" />\r\n                                    </FormGroup>\r\n                                    <Paper style={{ maxHeight: '500px', overflow: 'auto', marginTop: '12px' }}>\r\n                                        {\r\n                                            playlistVideoHtml.map(element => {\r\n                                                return element;\r\n                                            })\r\n                                        }\r\n                                    </Paper>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div style={{ width: '100%', marginLeft: '42px', marginRight: '96px'}}>\r\n                            <h1>Video Loop Tool</h1>\r\n                            <div style={{ display: 'flex', marginBottom: '12px' }}>\r\n                                <Button variant=\"contained\" color=\"primary\" onClick={() => { this.startLoop() }} style={{ 'marginTop': \"12px\", 'marginRight': '12px' }}>\r\n                                    Setup\r\n                                </Button>\r\n                                <TextField id=\"standard-basic\" label=\"YouTube VideoID\" value={this.state ? this.state.videoId || '' : ''} style={{ width: \"200px\" }} onChange={e => this.handleChange(e)} />\r\n                            </div>\r\n                            <div className=\"auto-resizable-iframe\">\r\n                                <div className=\"playerWrapper\">\r\n                                    <div id=\"player\"></div>\r\n                                </div>\r\n                                <div style={{ display: 'flex', marginTop: '36px', maxWidth: '100%' }}>\r\n                                    <VideoSlider\r\n                                        value={this.state.sliderValues}\r\n                                        valueLabelFormat={(v) => v + 's'}\r\n                                        onChange={(e: Event, newValue: number | number[]) => this.handleSliderChange(e, newValue)}\r\n                                        valueLabelDisplay=\"auto\"\r\n                                        min={0}\r\n                                        max={this.player ? parseInt(this.player.getDuration()) : 0}\r\n                                        className={\"videoSlider\"}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    </CardContent>\r\n                </Card>\r\n        );\r\n    }\r\n};"],"sourceRoot":""}